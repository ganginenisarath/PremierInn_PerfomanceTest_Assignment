<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Premier Inn" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="sec-ch-ua" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua</stringProp>
            <stringProp name="Header.value">&quot;.Not/A)Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;103&quot;, &quot;Chromium&quot;;v=&quot;103&quot;</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-mobile" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
            <stringProp name="Header.value">?0</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-platform" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">${__P(BASE_URL_1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">${__P(BASE_URL_2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_3" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_3</stringProp>
            <stringProp name="Argument.value">${__P(BASE_URL_3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_4" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_4</stringProp>
            <stringProp name="Argument.value">${__P(BASE_URL_4)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_5" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_5</stringProp>
            <stringProp name="Argument.value">${__P(BASE_URL_5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_6" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_6</stringProp>
            <stringProp name="Argument.value">${__P(BASE_URL_6)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_TT" elementType="Argument">
            <stringProp name="Argument.name">P_TT</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_threads" elementType="Argument">
            <stringProp name="Argument.name">P_threads</stringProp>
            <stringProp name="Argument.value">${__P(threads)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_ramp_Up" elementType="Argument">
            <stringProp name="Argument.name">P_ramp_Up</stringProp>
            <stringProp name="Argument.value">${__P(ramp_Up)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_ramp_Down" elementType="Argument">
            <stringProp name="Argument.name">P_ramp_Down</stringProp>
            <stringProp name="Argument.value">${__P(ramp_Down)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_duration" elementType="Argument">
            <stringProp name="Argument.name">P_duration</stringProp>
            <stringProp name="Argument.value">${__P(duration)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">C:/Users/Sarath/Downloads/PremierInn_Locations.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">P_hotelLocation</stringProp>
      </CSVDataSet>
      <hashTree/>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="jp@gc - Ultimate Thread Group" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-799043612">
            <stringProp name="1393258778">${P_threads}</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="151985819">${P_ramp_Up}</stringProp>
            <stringProp name="180722435">${P_duration}</stringProp>
            <stringProp name="13752116">${P_ramp_Down}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PremierInn_T01_Launch_HomePage" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_1}/gb/en/home.html" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/home.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">none</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1468836447">&lt;title&gt;Premier Inn hotels | Book direct&lt;/title&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_1}/gb/en/index.header.data" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/index.header.data</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1848171856">{&quot;content&quot;:{&quot;totalHotels&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_1}/akam/13/pixel_16f97a3b" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fh</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nav" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">nav</stringProp>
                  <stringProp name="Argument.value">{&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;,&quot;appName&quot;:&quot;Netscape&quot;,&quot;appCodeName&quot;:&quot;Mozilla&quot;,&quot;appVersion&quot;:&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;,&quot;appMinorVersion&quot;:0,&quot;product&quot;:&quot;Gecko&quot;,&quot;productSub&quot;:&quot;20030107&quot;,&quot;vendor&quot;:&quot;Google Inc.&quot;,&quot;vendorSub&quot;:&quot;&quot;,&quot;buildID&quot;:0,&quot;platform&quot;:&quot;Win32&quot;,&quot;oscpu&quot;:0,&quot;hardwareConcurrency&quot;:8,&quot;language&quot;:&quot;en-US&quot;,&quot;languages&quot;:[&quot;en-US&quot;,&quot;en&quot;],&quot;systemLanguage&quot;:0,&quot;userLanguage&quot;:0,&quot;doNotTrack&quot;:null,&quot;msDoNotTrack&quot;:0,&quot;cookieEnabled&quot;:true,&quot;geolocation&quot;:1,&quot;vibrate&quot;:1,&quot;maxTouchPoints&quot;:0,&quot;webdriver&quot;:false,&quot;plugins&quot;:[&quot;PDF Viewer&quot;,&quot;Chrome PDF Viewer&quot;,&quot;Chromium PDF Viewer&quot;,&quot;Microsoft Edge PDF Viewer&quot;,&quot;WebKit built-in PDF&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ps" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ps</stringProp>
                  <stringProp name="Argument.value">true,true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="timing" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">timing</stringProp>
                  <stringProp name="Argument.value">{&quot;1&quot;:90,&quot;2&quot;:282,&quot;3&quot;:392,&quot;4&quot;:497,&quot;5&quot;:601,&quot;profile&quot;:{&quot;bp&quot;:4,&quot;sr&quot;:0,&quot;dp&quot;:1,&quot;lt&quot;:0,&quot;ps&quot;:0,&quot;cv&quot;:59,&quot;fp&quot;:1,&quot;sp&quot;:0,&quot;br&quot;:2,&quot;ieps&quot;:1,&quot;av&quot;:0,&quot;z1&quot;:16,&quot;jsv&quot;:2,&quot;nav&quot;:0,&quot;nap&quot;:3,&quot;crc&quot;:0,&quot;z2&quot;:0,&quot;z3&quot;:2,&quot;z4&quot;:1,&quot;z5&quot;:0},&quot;main&quot;:1128,&quot;compute&quot;:90,&quot;send&quot;:601}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lt</stringProp>
                  <stringProp name="Argument.value">1659027024741+5.5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fp</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">dp</stringProp>
                  <stringProp name="Argument.value">{&quot;XDomainRequest&quot;:0,&quot;createPopup&quot;:0,&quot;removeEventListener&quot;:1,&quot;globalStorage&quot;:0,&quot;openDatabase&quot;:1,&quot;indexedDB&quot;:1,&quot;attachEvent&quot;:0,&quot;ActiveXObject&quot;:0,&quot;dispatchEvent&quot;:1,&quot;addBehavior&quot;:0,&quot;addEventListener&quot;:1,&quot;detachEvent&quot;:0,&quot;fireEvent&quot;:0,&quot;MutationObserver&quot;:1,&quot;HTMLMenuItemElement&quot;:0,&quot;Int8Array&quot;:1,&quot;postMessage&quot;:1,&quot;querySelector&quot;:1,&quot;getElementsByClassName&quot;:1,&quot;images&quot;:1,&quot;compatMode&quot;:&quot;CSS1Compat&quot;,&quot;documentMode&quot;:0,&quot;all&quot;:1,&quot;now&quot;:1,&quot;contextMenu&quot;:0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="jsv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">jsv</stringProp>
                  <stringProp name="Argument.value">1.7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bp</stringProp>
                  <stringProp name="Argument.value">2087755996,1953464915,591862434,325835597,1068473606,-1382186647,-365096851,-1979186206,-108039040,-1906852049</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ieps" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ieps</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">zh</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ap" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ap</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="br" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">br</stringProp>
                  <stringProp name="Argument.value">Chrome</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bt</stringProp>
                  <stringProp name="Argument.value">{&quot;charging&quot;:true,&quot;chargingTime&quot;:&quot;Infinity&quot;,&quot;dischargingTime&quot;:&quot;Infinity&quot;,&quot;level&quot;:0.22,&quot;onchargingchange&quot;:null,&quot;onchargingtimechange&quot;:null,&quot;ondischargingtimechange&quot;:null,&quot;onlevelchange&quot;:null}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cv</stringProp>
                  <stringProp name="Argument.value">e2f735526bd1b254138c5d8e77960ccda72c8fec</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value">4ffc6eaff2030de884dde92efa952c234692ad1b</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="av" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">av</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="crc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">crc</stringProp>
                  <stringProp name="Argument.value">{&quot;window.chrome&quot;:{&quot;app&quot;:{&quot;isInstalled&quot;:false,&quot;InstallState&quot;:{&quot;DISABLED&quot;:&quot;disabled&quot;,&quot;INSTALLED&quot;:&quot;installed&quot;,&quot;NOT_INSTALLED&quot;:&quot;not_installed&quot;},&quot;RunningState&quot;:{&quot;CANNOT_RUN&quot;:&quot;cannot_run&quot;,&quot;READY_TO_RUN&quot;:&quot;ready_to_run&quot;,&quot;RUNNING&quot;:&quot;running&quot;}},&quot;runtime&quot;:{&quot;OnInstalledReason&quot;:{&quot;CHROME_UPDATE&quot;:&quot;chrome_update&quot;,&quot;INSTALL&quot;:&quot;install&quot;,&quot;SHARED_MODULE_UPDATE&quot;:&quot;shared_module_update&quot;,&quot;UPDATE&quot;:&quot;update&quot;},&quot;OnRestartRequiredReason&quot;:{&quot;APP_UPDATE&quot;:&quot;app_update&quot;,&quot;OS_UPDATE&quot;:&quot;os_update&quot;,&quot;PERIODIC&quot;:&quot;periodic&quot;},&quot;PlatformArch&quot;:{&quot;ARM&quot;:&quot;arm&quot;,&quot;ARM64&quot;:&quot;arm64&quot;,&quot;MIPS&quot;:&quot;mips&quot;,&quot;MIPS64&quot;:&quot;mips64&quot;,&quot;X86_32&quot;:&quot;x86-32&quot;,&quot;X86_64&quot;:&quot;x86-64&quot;},&quot;PlatformNaclArch&quot;:{&quot;ARM&quot;:&quot;arm&quot;,&quot;MIPS&quot;:&quot;mips&quot;,&quot;MIPS64&quot;:&quot;mips64&quot;,&quot;X86_32&quot;:&quot;x86-32&quot;,&quot;X86_64&quot;:&quot;x86-64&quot;},&quot;PlatformOs&quot;:{&quot;ANDROID&quot;:&quot;android&quot;,&quot;CROS&quot;:&quot;cros&quot;,&quot;FUCHSIA&quot;:&quot;fuchsia&quot;,&quot;LINUX&quot;:&quot;linux&quot;,&quot;MAC&quot;:&quot;mac&quot;,&quot;OPENBSD&quot;:&quot;openbsd&quot;,&quot;WIN&quot;:&quot;win&quot;},&quot;RequestUpdateCheckStatus&quot;:{&quot;NO_UPDATE&quot;:&quot;no_update&quot;,&quot;THROTTLED&quot;:&quot;throttled&quot;,&quot;UPDATE_AVAILABLE&quot;:&quot;update_available&quot;}}}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fonts" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fonts</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="u" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">u</stringProp>
                  <stringProp name="Argument.value">4a9fbe3ec6aa527c8563749623bd4532</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="z" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">z</stringProp>
                  <stringProp name="Argument.value">{&quot;a&quot;:385448313,&quot;b&quot;:1,&quot;c&quot;:0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nap" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">nap</stringProp>
                  <stringProp name="Argument.value">11321144241322243122</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sp</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sr</stringProp>
                  <stringProp name="Argument.value">{&quot;inner&quot;:[1536,746],&quot;outer&quot;:[1536,816],&quot;screen&quot;:[0,0],&quot;pageOffset&quot;:[0,0],&quot;avail&quot;:[1536,816],&quot;size&quot;:[1536,864],&quot;client&quot;:[1519,746],&quot;colorDepth&quot;:24,&quot;pixelDepth&quot;:24}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">akam/13/pixel_16f97a3b</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}/content/cookiepolicies?brand=pi&amp;language=en" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="language" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">language</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="brand" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">brand</stringProp>
                  <stringProp name="Argument.value">pi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">content/cookiepolicies</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_3}/rest/v1/delivery?client=whitbreadgroup&amp;sessionId=1b70504f3eda4162af4f7a8c131cd41d&amp;version=2.8.2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;requestId&quot;:&quot;${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,CF_requestID)}&quot;,&quot;context&quot;:{&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;,&quot;timeOffsetInMinutes&quot;:330,&quot;channel&quot;:&quot;web&quot;,&quot;screen&quot;:{&quot;width&quot;:1536,&quot;height&quot;:864,&quot;orientation&quot;:&quot;landscape&quot;,&quot;colorDepth&quot;:24,&quot;pixelRatio&quot;:1.25},&quot;window&quot;:{&quot;width&quot;:1519,&quot;height&quot;:746},&quot;browser&quot;:{&quot;host&quot;:&quot;${BASE_URL_1}&quot;,&quot;webGLRenderer&quot;:&quot;ANGLE (Intel, Intel(R) Iris(R) Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11)&quot;},&quot;address&quot;:{&quot;url&quot;:&quot;https://${BASE_URL_1}/gb/en/home.html&quot;,&quot;referringUrl&quot;:&quot;&quot;}},&quot;id&quot;:{&quot;marketingCloudVisitorId&quot;:&quot;25764356207244138064059662056462270276&quot;},&quot;experienceCloud&quot;:{&quot;audienceManager&quot;:{&quot;locationHint&quot;:12,&quot;blob&quot;:&quot;6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y&quot;},&quot;analytics&quot;:{&quot;logging&quot;:&quot;server_side&quot;,&quot;supplementalDataId&quot;:&quot;2939B8C83E35BA7D-5C12E7B7BAECF392&quot;}},&quot;execute&quot;:{&quot;pageLoad&quot;:{}},&quot;prefetch&quot;:{&quot;views&quot;:[{}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,CF_sessionID)}&amp;version=2.8.2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_3}/rest/v1/delivery?client=whitbreadgroup&amp;sessionId=1b70504f3eda4162af4f7a8c131cd41d&amp;version=2.8.2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;requestId&quot;:&quot;${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,CF_requestID1)}&quot;,&quot;context&quot;:{&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;,&quot;timeOffsetInMinutes&quot;:330,&quot;channel&quot;:&quot;web&quot;,&quot;screen&quot;:{&quot;width&quot;:1536,&quot;height&quot;:864,&quot;orientation&quot;:&quot;landscape&quot;,&quot;colorDepth&quot;:24,&quot;pixelRatio&quot;:1.25},&quot;window&quot;:{&quot;width&quot;:1519,&quot;height&quot;:746},&quot;browser&quot;:{&quot;host&quot;:&quot;${BASE_URL_1}&quot;,&quot;webGLRenderer&quot;:&quot;ANGLE (Intel, Intel(R) Iris(R) Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11)&quot;},&quot;address&quot;:{&quot;url&quot;:&quot;https://${BASE_URL_1}/gb/en/home.html&quot;,&quot;referringUrl&quot;:&quot;&quot;}},&quot;id&quot;:{&quot;marketingCloudVisitorId&quot;:&quot;25764356207244138064059662056462270276&quot;},&quot;experienceCloud&quot;:{&quot;audienceManager&quot;:{&quot;locationHint&quot;:12,&quot;blob&quot;:&quot;6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y&quot;},&quot;analytics&quot;:{&quot;logging&quot;:&quot;server_side&quot;,&quot;supplementalDataId&quot;:&quot;704913369E3E9F91-09882C040DA725F4&quot;}},&quot;execute&quot;:{&quot;mboxes&quot;:[{&quot;index&quot;:0,&quot;name&quot;:&quot;Header-Config&quot;},{&quot;index&quot;:1,&quot;name&quot;:&quot;L2B-Config&quot;},{&quot;index&quot;:2,&quot;name&quot;:&quot;HP-testing&quot;}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">${P_TT}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PremierInn_T02_Enter_Place" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_4}/v1/autocomplete?input=/${P_hotelLocation}&amp;gplaces%5Bcomponents%5D=country:uk%7Ccountry:de" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="input" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">input</stringProp>
                  <stringProp name="Argument.value">/${P_hotelLocation}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="gplaces[components]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">gplaces[components]</stringProp>
                  <stringProp name="Argument.value">country:uk|country:de</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_4}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/autocomplete</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1244739161">&quot;code&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonOutput;
import groovy.json.JsonBuilder;

def json = new groovy.json.JsonSlurper().parseText(prev.getResponseDataAsString());
def json1=(json.places);

int random = Math.abs(new Random().nextInt() % json1.size());
def suggestion= json.places[random].suggestion;
def placeId= json.places[random].placeId;

vars.put(&quot;C_Place_g1&quot;,suggestion);
vars.put(&quot;C_Place_g2&quot;,placeId);

//log.info(&quot;Suggestion ---&gt;&quot;+suggestion.toString());
//log.info(&quot;Place Id---&gt;&quot;+placeId.toString());</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">${P_TT}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PremierInn_T03_Search_Hotels" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_1}/gb/en/search.html?searchModel.searchTerm=${P_hotelLocation},%20UK&amp;PLACEID=${C_Place_g2}&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}NIGHTS=${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BOOKINGCHANNEL=WEB&amp;SORT=1&amp;VIEW=2" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ADULT1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ADULT1</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="VIEW" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">VIEW</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="BOOKINGCHANNEL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">BOOKINGCHANNEL</stringProp>
                  <stringProp name="Argument.value">WEB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ROOMS" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ROOMS</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchModel.searchTerm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">searchModel.searchTerm</stringProp>
                  <stringProp name="Argument.value">${C_Place_g1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="PLACEID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">PLACEID</stringProp>
                  <stringProp name="Argument.value">${C_Place_g2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="COT1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">COT1</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="CHILD1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">CHILD1</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SORT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">SORT</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ARRdd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ARRdd</stringProp>
                  <stringProp name="Argument.value">${PP_arrivalDay}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ARRmm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ARRmm</stringProp>
                  <stringProp name="Argument.value">${PP_arrivalMonth}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="NIGHTS" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">NIGHTS</stringProp>
                  <stringProp name="Argument.value">${PP_nights}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="INTTYP1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">INTTYP1</stringProp>
                  <stringProp name="Argument.value">DB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ARRyyyy" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ARRyyyy</stringProp>
                  <stringProp name="Argument.value">${PP_arrivalYear}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/search.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Arriaval_Departure Date Calculator" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Calendar;
import java.util.Random;
import java.util.Date;
import java.text.SimpleDateFormat;

Date date;
Random rand = new Random();

Calendar c = Calendar.getInstance();
c.setTime(new Date()); 
int randomDay= rand.nextInt(12) + 30;

c.add(Calendar.DATE, randomDay); 
date = c.getTime();

String day = new SimpleDateFormat(&quot;dd&quot;).format(date);    
String month = new SimpleDateFormat(&quot;MM&quot;).format(date);  
String year = new SimpleDateFormat(&quot;yyyy&quot;).format(date); 

vars.put(&quot;PP_arrivalDay&quot;,day);
vars.put(&quot;PP_arrivalMonth&quot;,month);
vars.put(&quot;PP_arrivalYear&quot;,year);
vars.put(&quot;PP_arrivalDate&quot;,year+&quot;-&quot;+month+&quot;-&quot;+day);

int randomNights= rand.nextInt(3)+1;
c.add(Calendar.DATE, randomNights); 
date = c.getTime();

vars.put(&quot;PP_departureDate&quot;,new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(date));
vars.put(&quot;PP_nights&quot;,randomNights.toString());

//log.info(&quot;Arriavl Date ---&gt;&quot;+vars.get(&quot;PP_arrivalDate&quot;));
//log.info(&quot;Departure Date ---&gt; &quot;+vars.get(&quot;PP_departureDate&quot;));
//log.info(&quot;Nights ---&gt; &quot;+vars.get(&quot;PP_nights&quot;));


</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="688575934">&lt;title&gt;Search Page&lt;/title&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_3}/rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;requestId&quot;:&quot;${CF_requestID}&quot;,&quot;context&quot;:{&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;,&quot;timeOffsetInMinutes&quot;:330,&quot;channel&quot;:&quot;web&quot;,&quot;screen&quot;:{&quot;width&quot;:1536,&quot;height&quot;:864,&quot;orientation&quot;:&quot;landscape&quot;,&quot;colorDepth&quot;:24,&quot;pixelRatio&quot;:1.25},&quot;window&quot;:{&quot;width&quot;:1536,&quot;height&quot;:746},&quot;browser&quot;:{&quot;host&quot;:&quot;${BASE_URL_1}&quot;,&quot;webGLRenderer&quot;:&quot;ANGLE (Intel, Intel(R) Iris(R) Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11)&quot;},&quot;address&quot;:{&quot;url&quot;:&quot;https://${BASE_URL_1}/gb/en/search.html?searchModel.searchTerm=${P_hotelLocation},%20UK&amp;PLACEID=${C_Place_g2}&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BOOKINGCHANNEL=WEB&amp;SORT=1&amp;VIEW=2&quot;,&quot;referringUrl&quot;:&quot;https://${BASE_URL_1}/gb/en/home.html&quot;}},&quot;id&quot;:{&quot;tntId&quot;:&quot;${CF_sessionID}.31_0&quot;,&quot;marketingCloudVisitorId&quot;:&quot;25764356207244138064059662056462270276&quot;},&quot;experienceCloud&quot;:{&quot;audienceManager&quot;:{&quot;locationHint&quot;:12,&quot;blob&quot;:&quot;6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y&quot;},&quot;analytics&quot;:{&quot;logging&quot;:&quot;server_side&quot;,&quot;supplementalDataId&quot;:&quot;1707A4A8562F6E9E-188DD48AFFC52646&quot;}},&quot;execute&quot;:{&quot;pageLoad&quot;:{}},&quot;prefetch&quot;:{&quot;views&quot;:[{}]},&quot;telemetry&quot;:{&quot;entries&quot;:[{&quot;execution&quot;:117.3,&quot;parsing&quot;:0,&quot;request&quot;:{&quot;tls&quot;:28.2,&quot;timeToFirstByte&quot;:49.1,&quot;download&quot;:0.9,&quot;responseSize&quot;:306},&quot;telemetryServerToken&quot;:&quot;rPEFq/5x+VtJHwNlhEZSBid8LeHS78p0w+4hhFcLyQ8=&quot;,&quot;mode&quot;:&quot;edge&quot;,&quot;features&quot;:{&quot;executePageLoad&quot;:true,&quot;prefetchViewCount&quot;:1,&quot;decisioningMethod&quot;:&quot;server-side&quot;},&quot;requestId&quot;:&quot;${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,)}&quot;,&quot;timestamp&quot;:${__time(,)}},{&quot;execution&quot;:101.4,&quot;parsing&quot;:0,&quot;request&quot;:{&quot;timeToFirstByte&quot;:42.9,&quot;download&quot;:0.7,&quot;responseSize&quot;:345},&quot;telemetryServerToken&quot;:&quot;O+wkpwcQuMlT6XOFH/MlQvVyu1cz2KYDsPsAn4BBLmc=&quot;,&quot;mode&quot;:&quot;edge&quot;,&quot;features&quot;:{&quot;executeMboxCount&quot;:3,&quot;decisioningMethod&quot;:&quot;server-side&quot;},&quot;requestId&quot;:&quot;${CF_requestID1}&quot;,&quot;timestamp&quot;:${__time(,)}}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_1}/gb/en/search.searchresults.data" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/search.searchresults.data</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1055016541">totalHotels</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="P_pageSize" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">P_pageSize</stringProp>
              <stringProp name="RegexExtractor.regex">initialPageSize&quot;:(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_1}/gb/en/search.header.data" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/search.header.data</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1055016541">totalHotels</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}/content/cookiepolicies?brand=pi&amp;language=en" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="language" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">language</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="brand" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">brand</stringProp>
                  <stringProp name="Argument.value">pi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">content/cookiepolicies</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}/snowdrop/search/hotels/availabilities?bookingChannel=WEB&amp;location=${C_Place_g2}&amp;locationFormat=PLACEID&amp;arrival=${PP_arrivalDate}&amp;departure=${PP_departureDate}&amp;adults=1&amp;children=0&amp;cot=false&amp;type=DB&amp;rooms=1&amp;cellCodes=&amp;page=1&amp;size=${P_pageSize}&amp;country=gb&amp;language=en&amp;radiusUnit=MILES&amp;companyId=null&amp;employeeId=null&amp;sort=DISTANCE" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="country" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">country</stringProp>
                  <stringProp name="Argument.value">gb</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rooms" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rooms</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locationFormat" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">locationFormat</stringProp>
                  <stringProp name="Argument.value">PLACEID</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="arrival" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">arrival</stringProp>
                  <stringProp name="Argument.value">${PP_arrivalDate}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="adults" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">adults</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cot" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cot</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="language" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">language</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="employeeId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">employeeId</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sort</stringProp>
                  <stringProp name="Argument.value">DISTANCE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">DB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bookingChannel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">bookingChannel</stringProp>
                  <stringProp name="Argument.value">WEB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="companyId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">companyId</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="size" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">size</stringProp>
                  <stringProp name="Argument.value">${P_pageSize}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="children" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">children</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="location" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">location</stringProp>
                  <stringProp name="Argument.value">${C_Place_g2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cellCodes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cellCodes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="departure" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">departure</stringProp>
                  <stringProp name="Argument.value">${PP_departureDate}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="radiusUnit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">radiusUnit</stringProp>
                  <stringProp name="Argument.value">MILES</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">snowdrop/search/hotels/availabilities</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="C_hotelDetails-Change match no" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">C_hotelDetails</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..hotelAvailabilities[?(@.available==true)]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-197820915">hotelAvailabilities</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_5}/b/ss/whitpreminnprod/10/JS-2.22.4-LCUM/s34177846232573" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="c31" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c31</stringProp>
                  <stringProp name="Argument.value">New</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c32" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c32</stringProp>
                  <stringProp name="Argument.value">First Visit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cm." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cm.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ssf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ssf</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c38" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c38</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aamlh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aamlh</stringProp>
                  <stringProp name="Argument.value">12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AQB" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AQB</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v95" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v95</stringProp>
                  <stringProp name="Argument.value">+1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v10" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v10</stringProp>
                  <stringProp name="Argument.value">double</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fpCookieDomainPeriods" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fpCookieDomainPeriods</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AQE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AQE</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v12" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v12</stringProp>
                  <stringProp name="Argument.value">sun-mon</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v11" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v11</stringProp>
                  <stringProp name="Argument.value">40</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".cm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.cm</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v14" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v14</stringProp>
                  <stringProp name="Argument.value">mon</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sdid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sdid</stringProp>
                  <stringProp name="Argument.value">1707A4A8562F6E9E-188DD48AFFC52646</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v13" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v13</stringProp>
                  <stringProp name="Argument.value">sun</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v15" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v15</stringProp>
                  <stringProp name="Argument.value">extra large | </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v18" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v18</stringProp>
                  <stringProp name="Argument.value">look to book</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="events" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">events</stringProp>
                  <stringProp name="Argument.value">event23,event1,event81,event116,event120,event284,event285,event286</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c48" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c48</stringProp>
                  <stringProp name="Argument.value">premier inn search results</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c47" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c47</stringProp>
                  <stringProp name="Argument.value">extra large|aem 5.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cdp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cdp</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c1</stringProp>
                  <stringProp name="Argument.value">D=v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c2</stringProp>
                  <stringProp name="Argument.value">D=v2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c3</stringProp>
                  <stringProp name="Argument.value">D=v3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c4</stringProp>
                  <stringProp name="Argument.value">D=v4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c5</stringProp>
                  <stringProp name="Argument.value">D=v5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c6</stringProp>
                  <stringProp name="Argument.value">D=v6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c7" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c7</stringProp>
                  <stringProp name="Argument.value">D=v7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c8" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c8</stringProp>
                  <stringProp name="Argument.value">D=v8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c9" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c9</stringProp>
                  <stringProp name="Argument.value">D=v9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v27" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v27</stringProp>
                  <stringProp name="Argument.value">New</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="server" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">server</stringProp>
                  <stringProp name="Argument.value">castor</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c55" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c55</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bh</stringProp>
                  <stringProp name="Argument.value">746</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">25764356207244138064059662056462270276</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="d." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">d.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="products" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">products</stringProp>
                  <stringProp name="Argument.value">;MANMTI;;;event89;eVar62=UT-TBS-50.00|eVar50=0.6|eVar55=1,;MANDAL;;;event89;eVar62=UT-TBS-51.50|eVar50=0.7|eVar55=2,;MANPMI;;;event89;eVar62=UT-TBS-51.50|eVar50=0.8|eVar55=3,;MANOXF;;;event89;eVar62=UT-DBS-47.00|eVar50=0.9|eVar55=4|eVar51=new hotel,;MANSPI;;;event89;eVar62=UT-TBS-47.00|eVar50=0.9|eVar55=5,;MANBAR;;;event89;eVar62=UT-DBS-47.00|eVar50=1.0|eVar55=6,;MANPTI;;;event89;eVar62=UT-DBS-47.00|eVar50=1.5|eVar55=7,;MANSAL;;;event89;eVar62=UT-TBS-66.00|eVar50=3.3|eVar55=8|eVar51=last few rooms,;MANHEN;;;event89;eVar62=UT-QBS-48.00|eVar50=3.9|eVar55=9,;MANPAR;;;event89;eVar62=UT-DBS-47.00|eVar50=4.0|eVar55=10,;MANWES;;;event89;eVar62=UT-DBS-49.00|eVar50=4.8|eVar55=11,;MANTGI;;;event89;eVar62=UT-TBS-48.00|eVar50=5.0|eVar55=12|eVar51=new rooms,;OLDWHI;;;event89;eVar62=UT-DBS-48.00|eVar50=5.2|eVar55=13|eVar51=new rooms,;MANSTA;;;event89;eVar62=UT-DBS-47.00|eVar50=5.5|eVar55=14,;MANSWI;;;event89;eVar62=UT-DBS-48.00|eVar50=5.9|eVar55=15,;STOOLD;;;event89;eVar62=UT-DBS-47.00|eVar50=6.8|eVar55=16|eVar51=new rooms,;MANMER;;;event89;eVar62=UT-DBS-48.00|eVar50=6.9|eVar55=17|eVar51=new rooms,;STOBAM;;;event89;eVar62=UT-DBS-48.00|eVar50=7.3|eVar55=18,;OLDBRE;;;event89;eVar62=UT-DBS-48.00|eVar50=8.1|eVar55=19,;ALTGEO;;;event89;eVar62=UT-DBS-59.00|eVar50=8.1|eVar55=20,;MANCHE;;;event89;eVar62=UT-DBS-63.50|eVar50=8.3|eVar55=21|eVar51=last few rooms,;MANCOA;;;event89;eVar62=UT-DBS-51.00|eVar50=8.3|eVar55=22,;MANTRA;;;event89;eVar62=UT-DBS-51.00|eVar50=8.4|eVar55=23,;MANAIT;;;event89;eVar62=UT-DBS-87.00|eVar50=9.5|eVar55=24,;MANAIR;;;event89;eVar62=UT-DBS-87.00|eVar50=9.5|eVar55=25,;BURTHY;;;event89;eVar62=UT-DBS-47.00|eVar50=10.2|eVar55=26,;MANOUT;;;event89;eVar62=UT-DBS-47.00|eVar50=10.4|eVar55=27,;MANHEA;;;event89;eVar62=UT-DBS-66.00|eVar50=11.1|eVar55=28,;MANBUL;;;event89;eVar62=UT-DBS-59.00|eVar50=11.5|eVar55=29,;${PP_hotelCode};;;event89;eVar62=UT-DBS-46.00|eVar50=14.0|eVar55=30,;HAYSTO;;;event89;eVar62=UT-DBS-46.00|eVar50=17.0|eVar55=31|eVar51=new rooms,;WARSWA;;;event89;eVar62=UT-DBS-47.00|eVar50=17.6|eVar55=32,;MACMID;;;event89;eVar62=UT-TBS-70.00|eVar50=17.7|eVar55=33|eVar51=new rooms,;WARPTI;;;event89;eVar62=UT-TBS-47.00|eVar50=18.1|eVar55=34|eVar51=new rooms,;WARWIN;;;event89;eVar62=UT-DBS-47.00|eVar50=18.1|eVar55=35,;WARTOB;;;event89;eVar62=UT-DBS-47.00|eVar50=18.2|eVar55=36,;BOLBAR;;;event89;eVar62=UT-DBS-47.00|eVar50=18.7|eVar55=37,;MANOLD;;;event84;|eVar50=2.6|eVar55=38|eVar51=sold out,;MANQUA;;;event84;|eVar50=3.0|eVar55=39|eVar51=sold out,;MANBOD;;;event84;|eVar50=12.8|eVar55=40|eVar51=sold out</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bw</stringProp>
                  <stringProp name="Argument.value">1536</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v34" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v34</stringProp>
                  <stringProp name="Argument.value">not logged-in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v36" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v36</stringProp>
                  <stringProp name="Argument.value">+1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v35" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v35</stringProp>
                  <stringProp name="Argument.value">0fb7a926-0302-49b6-922b-5c125fd0ed64:0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v38" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v38</stringProp>
                  <stringProp name="Argument.value">23|23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v37" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v37</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/home.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c60" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c60</stringProp>
                  <stringProp name="Argument.value">22:21:10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cc</stringProp>
                  <stringProp name="Argument.value">GBP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mcorgid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mcorgid</stringProp>
                  <stringProp name="Argument.value">178D467352784DDC0A490D45@AdobeOrg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ce</stringProp>
                  <stringProp name="Argument.value">UTF-8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c</stringProp>
                  <stringProp name="Argument.value">24</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ch</stringProp>
                  <stringProp name="Argument.value">look to book</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="g" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">g</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/search.html?searchModel.searchTerm=${P_hotelLocation},%20UK&amp;PLACEID=${C_Place_g2}&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BOOKINGCHANNEL=WEB&amp;SORT=1&amp;VIEW=2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="j" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j</stringProp>
                  <stringProp name="Argument.value">1.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="k" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">k</stringProp>
                  <stringProp name="Argument.value">Y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/home.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ndh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ndh</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="s" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">s</stringProp>
                  <stringProp name="Argument.value">1536x864</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value">28/6/2022 22:21:11 4 -330</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">N</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v47" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v47</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v49" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v49</stringProp>
                  <stringProp name="Argument.value">First Visit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v1</stringProp>
                  <stringProp name="Argument.value">${P_hotelLocation}, uk</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v3</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pidt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pidt</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v4</stringProp>
                  <stringProp name="Argument.value">07/08/2022</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v5</stringProp>
                  <stringProp name="Argument.value">08/08/2022</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v6</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v7" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v7</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c74" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c74</stringProp>
                  <stringProp name="Argument.value">asia/calcutta</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v8" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v8</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v9" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v9</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="jsonv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">jsonv</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pid</stringProp>
                  <stringProp name="Argument.value">premier inn</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageName</stringProp>
                  <stringProp name="Argument.value">premier inn search results</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nsid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">nsid</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aamb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aamb</stringProp>
                  <stringProp name="Argument.value">6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v58" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v58</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/search.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v57" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v57</stringProp>
                  <stringProp name="Argument.value">premier inn search results</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="et" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">et</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pageIDType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageIDType</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">premier inn</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="region" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">region</stringProp>
                  <stringProp name="Argument.value">search-console-form</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".activitymap" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.activitymap</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activitymap." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activitymap.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c11" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c11</stringProp>
                  <stringProp name="Argument.value">D=v11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c10" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c10</stringProp>
                  <stringProp name="Argument.value">D=v10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c13" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c13</stringProp>
                  <stringProp name="Argument.value">D=v13</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c12" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c12</stringProp>
                  <stringProp name="Argument.value">D=v12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c14" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c14</stringProp>
                  <stringProp name="Argument.value">D=v14</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="link" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">link</stringProp>
                  <stringProp name="Argument.value">Done</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c18" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c18</stringProp>
                  <stringProp name="Argument.value">search</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="oid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">oid</stringProp>
                  <stringProp name="Argument.value">Done</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v122" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v122</stringProp>
                  <stringProp name="Argument.value">OEQQxzuoY8ZkqT84</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v74" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v74</stringProp>
                  <stringProp name="Argument.value">asia/calcutta</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v75" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v75</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/search.html?searchModel.searchTerm=${P_hotelLocation},%20UK&amp;PLACEID=${C_Place_g2}&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BOOKINGCHANNEL=WEB&amp;SORT=1&amp;VIEW=2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="oidt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">oidt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c20" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c20</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/home.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c21" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c21</stringProp>
                  <stringProp name="Argument.value">23|23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c24" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c24</stringProp>
                  <stringProp name="Argument.value">not logged-in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c23" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c23</stringProp>
                  <stringProp name="Argument.value">not logged-in: </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ot" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ot</stringProp>
                  <stringProp name="Argument.value">SUBMIT</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c27" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c27</stringProp>
                  <stringProp name="Argument.value">D=v58</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="a." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">a.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".a" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.a</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.c</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pf</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".d" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.d</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">b/ss/whitpreminnprod/10/JS-2.22.4-LCUM/s34177846232573</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="HotelDeatils_JSON" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def json = new groovy.json.JsonSlurper().parseText(vars.get(&quot;C_hotelDetails&quot;));
def hotelCode= json.hotelInfo.code;
def directory= hotelCode.substring(0,1);

vars.put(&quot;PP_hotelCode&quot;,hotelCode);
vars.put(&quot;PP_hotelLink&quot;,json.hotelInfo.links.detailsPage);
vars.put(&quot;PP_hotelLatitude&quot;,json.hotelInfo.map.latitude.toString());
vars.put(&quot;PP_hotelLongitude&quot;,json.hotelInfo.map.longitude.toString());
vars.put(&quot;PP_hotelDirectory&quot;,directory);


//log.info(json.hotelInfo.code);
//log.info(json.hotelInfo.links.detailsPage);
//log.info(json.hotelInfo.map.latitude.toString());
//log.info(json.hotelInfo.map.longitude.toString());
//log.info(directory);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">${P_TT}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PremierInn_T03_Sort_By_Price" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_3}/rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;requestId&quot;:&quot;${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,CF_requestID2)}&quot;,&quot;context&quot;:{&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;,&quot;timeOffsetInMinutes&quot;:330,&quot;channel&quot;:&quot;web&quot;,&quot;screen&quot;:{&quot;width&quot;:1536,&quot;height&quot;:864,&quot;orientation&quot;:&quot;landscape&quot;,&quot;colorDepth&quot;:24,&quot;pixelRatio&quot;:1.25},&quot;window&quot;:{&quot;width&quot;:1519,&quot;height&quot;:746},&quot;browser&quot;:{&quot;host&quot;:&quot;${BASE_URL_1}&quot;,&quot;webGLRenderer&quot;:&quot;ANGLE (Intel, Intel(R) Iris(R) Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11)&quot;},&quot;address&quot;:{&quot;url&quot;:&quot;https://${BASE_URL_1}/gb/en/search.html?searchModel.searchTerm=${P_hotelLocation},%20UK&amp;PLACEID=${C_Place_g2}&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BOOKINGCHANNEL=WEB&amp;SORT=2&amp;VIEW=2&quot;,&quot;referringUrl&quot;:&quot;https://${BASE_URL_1}/gb/en/home.html&quot;}},&quot;id&quot;:{&quot;tntId&quot;:&quot;${CF_sessionID}.31_0&quot;,&quot;marketingCloudVisitorId&quot;:&quot;25764356207244138064059662056462270276&quot;},&quot;experienceCloud&quot;:{&quot;audienceManager&quot;:{&quot;locationHint&quot;:12,&quot;blob&quot;:&quot;6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y&quot;},&quot;analytics&quot;:{&quot;logging&quot;:&quot;server_side&quot;,&quot;supplementalDataId&quot;:&quot;139400FDA3344736-22A66E305E5E4290&quot;}},&quot;execute&quot;:{&quot;mboxes&quot;:[{&quot;index&quot;:0,&quot;name&quot;:&quot;Header-Config&quot;},{&quot;index&quot;:1,&quot;name&quot;:&quot;L2B-Config&quot;},{&quot;index&quot;:2,&quot;name&quot;:&quot;SRP&quot;}]},&quot;telemetry&quot;:{&quot;entries&quot;:[{&quot;execution&quot;:277.8,&quot;parsing&quot;:0.1,&quot;request&quot;:{&quot;timeToFirstByte&quot;:269.9,&quot;download&quot;:0.9,&quot;responseSize&quot;:309},&quot;telemetryServerToken&quot;:&quot;6TAR7trXEfvIpU3pjYt+RW+DZ01uBGk+S/iOWVzz8uw=&quot;,&quot;mode&quot;:&quot;edge&quot;,&quot;features&quot;:{&quot;executePageLoad&quot;:true,&quot;prefetchViewCount&quot;:1,&quot;decisioningMethod&quot;:&quot;server-side&quot;},&quot;requestId&quot;:&quot;a414e743ca1a4b379b984977d68fbd94&quot;,&quot;timestamp&quot;:${__time(,)}}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_5}/b/ss/whitpreminnprod/10/JS-2.22.4-LCUM/s31631986965926" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="c31" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c31</stringProp>
                  <stringProp name="Argument.value">New</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c32" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c32</stringProp>
                  <stringProp name="Argument.value">First Visit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cm." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cm.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ssf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ssf</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c38" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c38</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aamlh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aamlh</stringProp>
                  <stringProp name="Argument.value">12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AQB" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AQB</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v10" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v10</stringProp>
                  <stringProp name="Argument.value">double</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fpCookieDomainPeriods" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fpCookieDomainPeriods</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="apc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">apc</stringProp>
                  <stringProp name="Argument.value">0.02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AQE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AQE</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v12" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v12</stringProp>
                  <stringProp name="Argument.value">sun-mon</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v11" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v11</stringProp>
                  <stringProp name="Argument.value">40</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".cm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.cm</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v14" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v14</stringProp>
                  <stringProp name="Argument.value">mon</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sdid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sdid</stringProp>
                  <stringProp name="Argument.value">139400FDA3344736-22A66E305E5E4290</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v13" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v13</stringProp>
                  <stringProp name="Argument.value">sun</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v15" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v15</stringProp>
                  <stringProp name="Argument.value">extra large | aem 5.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v18" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v18</stringProp>
                  <stringProp name="Argument.value">look to book</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="events" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">events</stringProp>
                  <stringProp name="Argument.value">event23,event81,event117,event120,event284,event285,event286</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c48" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c48</stringProp>
                  <stringProp name="Argument.value">premier inn search results</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c47" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c47</stringProp>
                  <stringProp name="Argument.value">extra large|aem 5.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="dns" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">dns</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cdp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cdp</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c1</stringProp>
                  <stringProp name="Argument.value">D=v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c2</stringProp>
                  <stringProp name="Argument.value">D=v2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c3</stringProp>
                  <stringProp name="Argument.value">D=v3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c4</stringProp>
                  <stringProp name="Argument.value">D=v4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pfi" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pfi</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c5</stringProp>
                  <stringProp name="Argument.value">D=v5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c6</stringProp>
                  <stringProp name="Argument.value">D=v6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c7" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c7</stringProp>
                  <stringProp name="Argument.value">D=v7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c8" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c8</stringProp>
                  <stringProp name="Argument.value">D=v8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c9" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c9</stringProp>
                  <stringProp name="Argument.value">D=v9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v27" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v27</stringProp>
                  <stringProp name="Argument.value">New</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="server" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">server</stringProp>
                  <stringProp name="Argument.value">castor</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c55" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c55</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bh</stringProp>
                  <stringProp name="Argument.value">746</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">25764356207244138064059662056462270276</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="d." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">d.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rsp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rsp</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="products" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">products</stringProp>
                  <stringProp name="Argument.value">;${PP_hotelCode};;;event89;eVar62=UT-DBS-46.00|eVar50=14.0|eVar55=1,;HAYSTO;;;event89;eVar62=UT-DBS-46.00|eVar50=17.0|eVar55=2|eVar51=new rooms,;MANOXF;;;event89;eVar62=UT-DBS-47.00|eVar50=0.9|eVar55=3|eVar51=new hotel,;MANSPI;;;event89;eVar62=UT-TBS-47.00|eVar50=0.9|eVar55=4,;MANBAR;;;event89;eVar62=UT-DBS-47.00|eVar50=1.0|eVar55=5,;MANPTI;;;event89;eVar62=UT-DBS-47.00|eVar50=1.5|eVar55=6,;MANPAR;;;event89;eVar62=UT-DBS-47.00|eVar50=4.0|eVar55=7,;MANSTA;;;event89;eVar62=UT-DBS-47.00|eVar50=5.5|eVar55=8,;STOOLD;;;event89;eVar62=UT-DBS-47.00|eVar50=6.8|eVar55=9|eVar51=new rooms,;BURTHY;;;event89;eVar62=UT-DBS-47.00|eVar50=10.2|eVar55=10,;MANOUT;;;event89;eVar62=UT-DBS-47.00|eVar50=10.4|eVar55=11,;WARSWA;;;event89;eVar62=UT-DBS-47.00|eVar50=17.6|eVar55=12,;WARPTI;;;event89;eVar62=UT-TBS-47.00|eVar50=18.1|eVar55=13|eVar51=new rooms,;WARWIN;;;event89;eVar62=UT-DBS-47.00|eVar50=18.1|eVar55=14,;WARTOB;;;event89;eVar62=UT-DBS-47.00|eVar50=18.2|eVar55=15,;BOLBAR;;;event89;eVar62=UT-DBS-47.00|eVar50=18.7|eVar55=16,;MANHEN;;;event89;eVar62=UT-QBS-48.00|eVar50=3.9|eVar55=17,;MANTGI;;;event89;eVar62=UT-TBS-48.00|eVar50=5.0|eVar55=18|eVar51=new rooms,;OLDWHI;;;event89;eVar62=UT-DBS-48.00|eVar50=5.2|eVar55=19|eVar51=new rooms,;MANSWI;;;event89;eVar62=UT-DBS-48.00|eVar50=5.9|eVar55=20,;MANMER;;;event89;eVar62=UT-DBS-48.00|eVar50=6.9|eVar55=21|eVar51=new rooms,;STOBAM;;;event89;eVar62=UT-DBS-48.00|eVar50=7.3|eVar55=22,;OLDBRE;;;event89;eVar62=UT-DBS-48.00|eVar50=8.1|eVar55=23,;MANWES;;;event89;eVar62=UT-DBS-49.00|eVar50=4.8|eVar55=24,;MANMTI;;;event89;eVar62=UT-TBS-50.00|eVar50=0.6|eVar55=25,;MANCOA;;;event89;eVar62=UT-DBS-51.00|eVar50=8.3|eVar55=26,;MANTRA;;;event89;eVar62=UT-DBS-51.00|eVar50=8.4|eVar55=27,;MANDAL;;;event89;eVar62=UT-TBS-51.50|eVar50=0.7|eVar55=28,;MANPMI;;;event89;eVar62=UT-TBS-51.50|eVar50=0.8|eVar55=29,;ALTGEO;;;event89;eVar62=UT-DBS-59.00|eVar50=8.1|eVar55=30,;MANBUL;;;event89;eVar62=UT-DBS-59.00|eVar50=11.5|eVar55=31,;MANCHE;;;event89;eVar62=UT-DBS-63.50|eVar50=8.3|eVar55=32|eVar51=last few rooms,;MANSAL;;;event89;eVar62=UT-TBS-66.00|eVar50=3.3|eVar55=33|eVar51=last few rooms,;MANHEA;;;event89;eVar62=UT-DBS-66.00|eVar50=11.1|eVar55=34,;MACMID;;;event89;eVar62=UT-TBS-70.00|eVar50=17.7|eVar55=35|eVar51=new rooms,;MANAIT;;;event89;eVar62=UT-DBS-87.00|eVar50=9.5|eVar55=36,;MANAIR;;;event89;eVar62=UT-DBS-87.00|eVar50=9.5|eVar55=37,;MANBOD;;;event84;|eVar50=12.8|eVar55=38|eVar51=sold out,;MANOLD;;;event84;|eVar50=2.6|eVar55=39|eVar51=sold out,;MANQUA;;;event84;|eVar50=3.0|eVar55=40|eVar51=sold out</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bw</stringProp>
                  <stringProp name="Argument.value">1536</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v34" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v34</stringProp>
                  <stringProp name="Argument.value">not logged in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tot" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tot</stringProp>
                  <stringProp name="Argument.value">4.99</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v36" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v36</stringProp>
                  <stringProp name="Argument.value">+1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v35" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v35</stringProp>
                  <stringProp name="Argument.value">0fb7a926-0302-49b6-922b-5c125fd0ed64:0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v38" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v38</stringProp>
                  <stringProp name="Argument.value">11|11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v37" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v37</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/search.html?searchModel.searchTerm=${P_hotelLocation},%20UK&amp;PLACEID=${C_Place_g2}&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BOOKINGCHANNEL=WEB&amp;SORT=1&amp;VIEW=2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c60" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c60</stringProp>
                  <stringProp name="Argument.value">22:21:25</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cc</stringProp>
                  <stringProp name="Argument.value">GBP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mcorgid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mcorgid</stringProp>
                  <stringProp name="Argument.value">178D467352784DDC0A490D45@AdobeOrg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ce</stringProp>
                  <stringProp name="Argument.value">UTF-8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c</stringProp>
                  <stringProp name="Argument.value">24</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ch</stringProp>
                  <stringProp name="Argument.value">look to book</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="g" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">g</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/search.html?searchModel.searchTerm=${P_hotelLocation},%20UK&amp;PLACEID=${C_Place_g2}&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BOOKINGCHANNEL=WEB&amp;SORT=2&amp;VIEW=2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="j" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j</stringProp>
                  <stringProp name="Argument.value">1.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="k" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">k</stringProp>
                  <stringProp name="Argument.value">Y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="onl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">onl</stringProp>
                  <stringProp name="Argument.value">0.01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ndh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ndh</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="s" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">s</stringProp>
                  <stringProp name="Argument.value">1536x864</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value">28/6/2022 22:21:25 4 -330</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">N</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v47" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v47</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v49" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v49</stringProp>
                  <stringProp name="Argument.value">First Visit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v1</stringProp>
                  <stringProp name="Argument.value">${P_hotelLocation}, uk</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v3</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v4</stringProp>
                  <stringProp name="Argument.value">07/08/2022</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v5</stringProp>
                  <stringProp name="Argument.value">08/08/2022</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v6</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rdr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rdr</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v7" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v7</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c74" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c74</stringProp>
                  <stringProp name="Argument.value">asia/calcutta</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v8" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v8</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v9" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v9</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="jsonv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">jsonv</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageName</stringProp>
                  <stringProp name="Argument.value">premier inn search results</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nsid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">nsid</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aamb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aamb</stringProp>
                  <stringProp name="Argument.value">6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v58" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v58</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/search.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v57" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v57</stringProp>
                  <stringProp name="Argument.value">premier inn search results</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="req" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">req</stringProp>
                  <stringProp name="Argument.value">0.34</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="prc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">prc</stringProp>
                  <stringProp name="Argument.value">4.56</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pt." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pt.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="et" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">et</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lrt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lrt</stringProp>
                  <stringProp name="Argument.value">254</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".pt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.pt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c11" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c11</stringProp>
                  <stringProp name="Argument.value">D=v11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c10" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c10</stringProp>
                  <stringProp name="Argument.value">D=v10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c13" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c13</stringProp>
                  <stringProp name="Argument.value">D=v13</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c12" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c12</stringProp>
                  <stringProp name="Argument.value">D=v12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c14" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c14</stringProp>
                  <stringProp name="Argument.value">D=v14</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c18" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c18</stringProp>
                  <stringProp name="Argument.value">search</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v122" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v122</stringProp>
                  <stringProp name="Argument.value">OEQQxzuoY8ZkqT84</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v74" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v74</stringProp>
                  <stringProp name="Argument.value">asia/calcutta</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v75" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v75</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/search.html?searchModel.searchTerm=${P_hotelLocation},%20UK&amp;PLACEID=${C_Place_g2}&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BOOKINGCHANNEL=WEB&amp;SORT=2&amp;VIEW=2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tcp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tcp</stringProp>
                  <stringProp name="Argument.value">0.05</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c20" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c20</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/search.html?searchModel.searchTerm=${P_hotelLocation},%20UK&amp;PLACEID=${C_Place_g2}&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BOOKINGCHANNEL=WEB&amp;SORT=1&amp;VIEW=2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c21" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c21</stringProp>
                  <stringProp name="Argument.value">11|11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c24" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c24</stringProp>
                  <stringProp name="Argument.value">not logged in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c23" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c23</stringProp>
                  <stringProp name="Argument.value">not logged in: premier inn search results</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c27" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c27</stringProp>
                  <stringProp name="Argument.value">D=v58</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.c</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pf</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".d" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.d</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">b/ss/whitpreminnprod/10/JS-2.22.4-LCUM/s31631986965926</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">${P_TT}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PremierInn_T04_View_Details" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}NIGHTS=${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BRAND=PI" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ROOMS" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ROOMS</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ADULT1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ADULT1</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="COT1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">COT1</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="CHILD1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">CHILD1</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ARRdd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ARRdd</stringProp>
                  <stringProp name="Argument.value">${PP_arrivalDay}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ARRmm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ARRmm</stringProp>
                  <stringProp name="Argument.value">${PP_arrivalMonth}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="NIGHTS" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">NIGHTS</stringProp>
                  <stringProp name="Argument.value">${PP_nights}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="INTTYP1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">INTTYP1</stringProp>
                  <stringProp name="Argument.value">DB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ARRyyyy" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ARRyyyy</stringProp>
                  <stringProp name="Argument.value">${PP_arrivalYear}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="BRAND" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">BRAND</stringProp>
                  <stringProp name="Argument.value">PI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/hotels${PP_hotelLink}.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1899337065">${PP_hotelLink}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_1}/gb/en/account/pihotelinfoconfig.jsdata" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/account/pihotelinfoconfig.jsdata</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_1}/etc/designs/global/dictionaries/labels/i18n.jsondict.en" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">etc/designs/global/dictionaries/labels/i18n.jsondict.en</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="193451388">account.dashboard.and</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_1}/gb/en/index.header.data" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/index.header.data</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="adrum" elementType="Header">
                  <stringProp name="Header.name">adrum</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}/booking/hotels/${PP_hotelCode}/availability?adults=1&amp;arrival=${PP_arrivalDate}&amp;bookingChannel=WEB&amp;cellCodes=&amp;children=0&amp;cot=0&amp;country=GB&amp;departure=${PP_departureDate}&amp;language=en&amp;rooms=1&amp;type=DB" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="country" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">country</stringProp>
                  <stringProp name="Argument.value">GB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bookingChannel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">bookingChannel</stringProp>
                  <stringProp name="Argument.value">WEB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rooms" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rooms</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="arrival" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">arrival</stringProp>
                  <stringProp name="Argument.value">${PP_arrivalDate}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="children" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">children</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="adults" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">adults</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cot" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cot</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cellCodes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cellCodes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="language" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">language</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="departure" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">departure</stringProp>
                  <stringProp name="Argument.value">${PP_departureDate}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">DB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">booking/hotels/${PP_hotelCode}/availability</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Hotel-Brand" elementType="Header">
                  <stringProp name="Header.name">Hotel-Brand</stringProp>
                  <stringProp name="Header.value">PI</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Hotel_Details" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonOutput;

def json = new groovy.json.JsonSlurper().parseText(prev.getResponseDataAsString());

def flex=JsonOutput.toJson(json.ratePlans.findAll{it.name == &quot;Flex&quot;}[0]).toString();
def semiflex=JsonOutput.toJson(json.ratePlans.findAll{it.name == &quot;Semi-Flex&quot;}[0]).toString();
def standard=JsonOutput.toJson(json.ratePlans.findAll{it.name == &quot;Standard&quot;}[0]).toString();

def flexText=JsonOutput.toJson(json.ratePlans.findAll{it.name == &quot;Flex&quot;}[0].description).toString();
def semiflexText=JsonOutput.toJson(json.ratePlans.findAll{it.name == &quot;Semi-Flex&quot;}[0].description).toString();
def standardText=JsonOutput.toJson(json.ratePlans.findAll{it.name == &quot;Standard&quot;}[0].description).toString();
def flexLettingType=JsonOutput.toJson(json.ratePlans.findAll{it.name == &quot;Flex&quot;}[0].rooms.lettingType).toString();

vars.put(&quot;PP_flexDetails&quot;,flex.substring(0, flex.length() - 1));
vars.put(&quot;PP_semiFlexDetails&quot;,semiflex.substring(0, semiflex.length() - 1));
vars.put(&quot;PP_standardDetails&quot;,standard.substring(0, standard.length() - 1));
vars.put(&quot;PP_flexRoomCode&quot;,(json.ratePlans.findAll{it.name == &quot;Flex&quot;}.code[0]).toString());
vars.put(&quot;PP_flexText&quot;,flexText);
vars.put(&quot;PP_semiflexText&quot;,semiflexText);
vars.put(&quot;PP_standardText&quot;,standardText);

vars.put(&quot;PP_hotelNotes&quot;,JsonOutput.toJson(json.notes).toString());
vars.put(&quot;PP_cnpAuthorisation&quot;,JsonOutput.toJson(json.cnpAuthorisation).toString());
vars.put(&quot;PP_sessionId&quot;,json.sessionId.toString());
vars.put(&quot;PP_arrivalDateToday&quot;,json.arrivalDateToday.toString());
vars.put(&quot;PP_hotelCode&quot;,json.hotelCode.toString());
vars.put(&quot;PP_limitedAvailability&quot;,json.limitedAvailability.toString());
vars.put(&quot;PP_prepaymentAllowed&quot;,json.prepaymentAllowed.toString());
vars.put(&quot;PP_totalNights&quot;,json.totalNights.toString());
vars.put(&quot;PP_totalGuests&quot;,json.totalGuests.toString());
vars.put(&quot;PP_cityTaxForLeisure&quot;,json.cityTaxForLeisure.toString());
vars.put(&quot;PP_cityTaxForBusiness&quot;,json.cityTaxForBusiness.toString());
vars.put(&quot;PP_paymentProvider&quot;,json.paymentProvider.toString());
vars.put(&quot;PP_flexLettingType&quot;,flexLettingType.substring(1, flexLettingType.length() - 1));

//log.info(&quot;LEtting Type ---&gt;&quot;+vars.get(&quot;PP_flexLettingType&quot;));
//log.info(flexText);
//log.info(semiflexText);
//log.info((json.ratePlans.findAll{it.name == &quot;Flex&quot;}.code[0]).toString());
//log.info(JsonOutput.toJson(json.cnpAuthorisation).toString());
//log.info(JsonOutput.toJson(json.notes).toString());
//log.info(flex.substring(0, flex.length() - 1));
//log.info(semiflex.substring(0, semiflex.length() - 1));
//log.info(standard.substring(0, standard.length() - 1));
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-248649279">hotelCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_1}/gb/en/hoteldirectory/${PP_hotelDirectory}/${PP_hotelCode}.complete.data" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/hoteldirectory/${PP_hotelDirectory}/${PP_hotelCode}.complete.data</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1106215426">contactDetails</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.tpl.html" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/hotels${PP_hotelLink}.tpl.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1899337065">${PP_hotelLink}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}/search/hotels/prices?location=${PP_hotelLatitude},${PP_hotelLongitude}&amp;locationFormat=LATLONG&amp;startDate=${PP_arrivalDate}&amp;endDate=${PP_departureDate}&amp;radius=20&amp;radiusUnit=MILES&amp;page=1&amp;size=5&amp;roomType=DB&amp;sort=DISTANCE&amp;country=gb&amp;language=en&amp;campaignPrice=2000" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="campaignPrice" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">campaignPrice</stringProp>
                  <stringProp name="Argument.value">2000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="country" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">country</stringProp>
                  <stringProp name="Argument.value">gb</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locationFormat" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">locationFormat</stringProp>
                  <stringProp name="Argument.value">LATLONG</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="endDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">endDate</stringProp>
                  <stringProp name="Argument.value">${PP_departureDate}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="language" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">language</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sort</stringProp>
                  <stringProp name="Argument.value">DISTANCE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="size" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">size</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="location" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">location</stringProp>
                  <stringProp name="Argument.value">${PP_hotelLatitude},${PP_hotelLongitude}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="radius" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">radius</stringProp>
                  <stringProp name="Argument.value">20</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="radiusUnit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">radiusUnit</stringProp>
                  <stringProp name="Argument.value">MILES</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">startDate</stringProp>
                  <stringProp name="Argument.value">${PP_arrivalDate}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="roomType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">roomType</stringProp>
                  <stringProp name="Argument.value">DB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">search/hotels/prices</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="110549828">total</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_3}/rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;requestId&quot;:&quot;${CF_requestID2}&quot;,&quot;context&quot;:{&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;,&quot;timeOffsetInMinutes&quot;:330,&quot;channel&quot;:&quot;web&quot;,&quot;screen&quot;:{&quot;width&quot;:1536,&quot;height&quot;:864,&quot;orientation&quot;:&quot;landscape&quot;,&quot;colorDepth&quot;:24,&quot;pixelRatio&quot;:1.25},&quot;window&quot;:{&quot;width&quot;:1519,&quot;height&quot;:746},&quot;browser&quot;:{&quot;host&quot;:&quot;${BASE_URL_1}&quot;,&quot;webGLRenderer&quot;:&quot;ANGLE (Intel, Intel(R) Iris(R) Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11)&quot;},&quot;address&quot;:{&quot;url&quot;:&quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}?ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BRAND=PI&quot;,&quot;referringUrl&quot;:&quot;https://${BASE_URL_1}/gb/en/search.html?searchModel.searchTerm=${P_hotelLocation},%20UK&amp;PLACEID=${C_Place_g2}&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BOOKINGCHANNEL=WEB&amp;SORT=2&amp;VIEW=2&quot;}},&quot;id&quot;:{&quot;tntId&quot;:&quot;${CF_sessionID}.31_0&quot;,&quot;marketingCloudVisitorId&quot;:&quot;25764356207244138064059662056462270276&quot;},&quot;experienceCloud&quot;:{&quot;audienceManager&quot;:{&quot;locationHint&quot;:12,&quot;blob&quot;:&quot;6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y&quot;},&quot;analytics&quot;:{&quot;logging&quot;:&quot;server_side&quot;,&quot;supplementalDataId&quot;:&quot;666879AB2FA64DE9-472EDE46060D10DC&quot;}},&quot;execute&quot;:{&quot;pageLoad&quot;:{}},&quot;prefetch&quot;:{&quot;views&quot;:[{}]},&quot;telemetry&quot;:{&quot;entries&quot;:[{&quot;execution&quot;:52,&quot;parsing&quot;:0,&quot;request&quot;:{&quot;timeToFirstByte&quot;:40,&quot;download&quot;:1.5,&quot;responseSize&quot;:339},&quot;telemetryServerToken&quot;:&quot;cJWuCgDiaU1IgPqDGhBbFED2EX07VODPHUW1TU+2Foc=&quot;,&quot;mode&quot;:&quot;edge&quot;,&quot;features&quot;:{&quot;executeMboxCount&quot;:3,&quot;decisioningMethod&quot;:&quot;server-side&quot;},&quot;requestId&quot;:&quot;${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,)}&quot;,&quot;timestamp&quot;:${__time(,)}}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//content/roomtypes?brand=pi&amp;country=gb&amp;language=en" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="country" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">country</stringProp>
                  <stringProp name="Argument.value">gb</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="language" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">language</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="brand" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">brand</stringProp>
                  <stringProp name="Argument.value">pi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/content/roomtypes</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1077397410">roomTypes</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//content/rateclassifications?brand=pi&amp;hotelCode=${PP_hotelCode}&amp;language=en" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="language" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">language</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hotelCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">hotelCode</stringProp>
                  <stringProp name="Argument.value">${PP_hotelCode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="brand" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">brand</stringProp>
                  <stringProp name="Argument.value">pi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/content/rateclassifications</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="599414861">rateClassifications</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}/content/cookiepolicies?brand=pi&amp;language=en" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="language" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">language</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="brand" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">brand</stringProp>
                  <stringProp name="Argument.value">pi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">content/cookiepolicies</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_3}/rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;requestId&quot;:&quot;${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,CF_requestID3)}&quot;,&quot;context&quot;:{&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;,&quot;timeOffsetInMinutes&quot;:330,&quot;channel&quot;:&quot;web&quot;,&quot;screen&quot;:{&quot;width&quot;:1536,&quot;height&quot;:864,&quot;orientation&quot;:&quot;landscape&quot;,&quot;colorDepth&quot;:24,&quot;pixelRatio&quot;:1.25},&quot;window&quot;:{&quot;width&quot;:1519,&quot;height&quot;:746},&quot;browser&quot;:{&quot;host&quot;:&quot;${BASE_URL_1}&quot;,&quot;webGLRenderer&quot;:&quot;ANGLE (Intel, Intel(R) Iris(R) Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11)&quot;},&quot;address&quot;:{&quot;url&quot;:&quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}?ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BRAND=PI&quot;,&quot;referringUrl&quot;:&quot;https://${BASE_URL_1}/gb/en/search.html?searchModel.searchTerm=${P_hotelLocation},%20UK&amp;PLACEID=${C_Place_g2}&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BOOKINGCHANNEL=WEB&amp;SORT=2&amp;VIEW=2&quot;}},&quot;id&quot;:{&quot;tntId&quot;:&quot;${CF_sessionID}.31_0&quot;,&quot;marketingCloudVisitorId&quot;:&quot;25764356207244138064059662056462270276&quot;},&quot;experienceCloud&quot;:{&quot;audienceManager&quot;:{&quot;locationHint&quot;:12,&quot;blob&quot;:&quot;6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y&quot;},&quot;analytics&quot;:{&quot;logging&quot;:&quot;server_side&quot;,&quot;supplementalDataId&quot;:&quot;5475F614D9F479B6-7D5D47627C79ED6F&quot;}},&quot;execute&quot;:{&quot;mboxes&quot;:[{&quot;index&quot;:0,&quot;name&quot;:&quot;Header-Config&quot;},{&quot;index&quot;:1,&quot;name&quot;:&quot;L2B-Config&quot;}]},&quot;telemetry&quot;:{&quot;entries&quot;:[{&quot;execution&quot;:597.7,&quot;parsing&quot;:0.1,&quot;request&quot;:{&quot;timeToFirstByte&quot;:312,&quot;download&quot;:1,&quot;responseSize&quot;:692},&quot;telemetryServerToken&quot;:&quot;cJWuCgDiaU1IgPqDGhBbFED2EX07VODPHUW1TU+2Foc=&quot;,&quot;mode&quot;:&quot;edge&quot;,&quot;features&quot;:{&quot;executePageLoad&quot;:true,&quot;prefetchViewCount&quot;:1,&quot;decisioningMethod&quot;:&quot;server-side&quot;},&quot;requestId&quot;:&quot;${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,)}&quot;,&quot;timestamp&quot;:${__time(,)}}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_3}/rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;requestId&quot;:&quot;${CF_requestID3}&quot;,&quot;context&quot;:{&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;,&quot;timeOffsetInMinutes&quot;:330,&quot;channel&quot;:&quot;web&quot;,&quot;screen&quot;:{&quot;width&quot;:1536,&quot;height&quot;:864,&quot;orientation&quot;:&quot;landscape&quot;,&quot;colorDepth&quot;:24,&quot;pixelRatio&quot;:1.25},&quot;window&quot;:{&quot;width&quot;:1519,&quot;height&quot;:746},&quot;browser&quot;:{&quot;host&quot;:&quot;${BASE_URL_1}&quot;,&quot;webGLRenderer&quot;:&quot;ANGLE (Intel, Intel(R) Iris(R) Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11)&quot;},&quot;address&quot;:{&quot;url&quot;:&quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}?ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BRAND=PI&quot;,&quot;referringUrl&quot;:&quot;https://${BASE_URL_1}/gb/en/search.html?searchModel.searchTerm=${P_hotelLocation},%20UK&amp;PLACEID=${C_Place_g2}&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BOOKINGCHANNEL=WEB&amp;SORT=2&amp;VIEW=2&quot;}},&quot;id&quot;:{&quot;tntId&quot;:&quot;${CF_sessionID}.31_0&quot;,&quot;marketingCloudVisitorId&quot;:&quot;25764356207244138064059662056462270276&quot;},&quot;experienceCloud&quot;:{&quot;audienceManager&quot;:{&quot;locationHint&quot;:12,&quot;blob&quot;:&quot;6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y&quot;},&quot;analytics&quot;:{&quot;logging&quot;:&quot;server_side&quot;,&quot;supplementalDataId&quot;:&quot;666879AB2FA64DE9-472EDE46060D10DC&quot;}},&quot;execute&quot;:{&quot;mboxes&quot;:[{&quot;parameters&quot;:{&quot;entity.id&quot;:&quot;${PP_hotelCode}sunvShort&quot;},&quot;index&quot;:0,&quot;name&quot;:&quot;bf-entry&quot;}]},&quot;telemetry&quot;:{&quot;entries&quot;:[{&quot;execution&quot;:72.4,&quot;parsing&quot;:0,&quot;request&quot;:{&quot;timeToFirstByte&quot;:58.5,&quot;download&quot;:1,&quot;responseSize&quot;:329},&quot;telemetryServerToken&quot;:&quot;cJWuCgDiaU1IgPqDGhBbFED2EX07VODPHUW1TU+2Foc=&quot;,&quot;mode&quot;:&quot;edge&quot;,&quot;features&quot;:{&quot;executeMboxCount&quot;:2,&quot;decisioningMethod&quot;:&quot;server-side&quot;},&quot;requestId&quot;:&quot;9df4d2ee5d6d479794a2bbf5537cc594&quot;,&quot;timestamp&quot;:${__time(,)}}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_5}/b/ss/whitpreminnprod/10/JS-2.22.4-LCUM/s3687821519546" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="c31" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c31</stringProp>
                  <stringProp name="Argument.value">New</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c32" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c32</stringProp>
                  <stringProp name="Argument.value">First Visit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cm." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cm.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ssf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ssf</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c38" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c38</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aamlh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aamlh</stringProp>
                  <stringProp name="Argument.value">12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AQB" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AQB</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v95" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v95</stringProp>
                  <stringProp name="Argument.value">+1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v10" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v10</stringProp>
                  <stringProp name="Argument.value">double</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fpCookieDomainPeriods" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fpCookieDomainPeriods</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="apc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">apc</stringProp>
                  <stringProp name="Argument.value">0.01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AQE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AQE</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v12" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v12</stringProp>
                  <stringProp name="Argument.value">sun-mon</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v11" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v11</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".cm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.cm</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v14" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v14</stringProp>
                  <stringProp name="Argument.value">mon</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sdid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sdid</stringProp>
                  <stringProp name="Argument.value">666879AB2FA64DE9-472EDE46060D10DC</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v13" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v13</stringProp>
                  <stringProp name="Argument.value">sun</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v15" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v15</stringProp>
                  <stringProp name="Argument.value">extra large | aem 5.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v18" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v18</stringProp>
                  <stringProp name="Argument.value">hotel details</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="events" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">events</stringProp>
                  <stringProp name="Argument.value">event23,event1,event2,prodView,event120,event284,event285,event286</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c48" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c48</stringProp>
                  <stringProp name="Argument.value">premier inn: hotel details</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c47" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c47</stringProp>
                  <stringProp name="Argument.value">D=v15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="dns" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">dns</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cdp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cdp</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c1</stringProp>
                  <stringProp name="Argument.value">D=v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c2</stringProp>
                  <stringProp name="Argument.value">D=v2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c3</stringProp>
                  <stringProp name="Argument.value">D=v3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c4</stringProp>
                  <stringProp name="Argument.value">D=v4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pfi" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pfi</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c5</stringProp>
                  <stringProp name="Argument.value">D=v5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c6</stringProp>
                  <stringProp name="Argument.value">D=v6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c7" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c7</stringProp>
                  <stringProp name="Argument.value">D=v7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c8" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c8</stringProp>
                  <stringProp name="Argument.value">D=v8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c9" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c9</stringProp>
                  <stringProp name="Argument.value">D=v9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v27" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v27</stringProp>
                  <stringProp name="Argument.value">New</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="server" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">server</stringProp>
                  <stringProp name="Argument.value">castor</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c55" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c55</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bh</stringProp>
                  <stringProp name="Argument.value">746</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">25764356207244138064059662056462270276</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="d." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">d.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rsp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rsp</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="products" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">products</stringProp>
                  <stringProp name="Argument.value">;${PP_hotelCode};;;event90=1;eVar65=RT-DBS-61.00&gt;SF-DBS-55.00&gt;UT-DBS-46.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bw</stringProp>
                  <stringProp name="Argument.value">1536</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v34" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v34</stringProp>
                  <stringProp name="Argument.value">not logged-in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tot" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tot</stringProp>
                  <stringProp name="Argument.value">2.17</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v36" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v36</stringProp>
                  <stringProp name="Argument.value">+1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v35" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v35</stringProp>
                  <stringProp name="Argument.value">0fb7a926-0302-49b6-922b-5c125fd0ed64:0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v38" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v38</stringProp>
                  <stringProp name="Argument.value">11|11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v37" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v37</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/search.html?searchModel.searchTerm=${P_hotelLocation},%20UK&amp;PLACEID=${C_Place_g2}&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BOOKINGCHANNEL=WEB&amp;SORT=2&amp;VIEW=2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c60" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c60</stringProp>
                  <stringProp name="Argument.value">22:21:45</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cc</stringProp>
                  <stringProp name="Argument.value">GBP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mcorgid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mcorgid</stringProp>
                  <stringProp name="Argument.value">178D467352784DDC0A490D45@AdobeOrg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ce</stringProp>
                  <stringProp name="Argument.value">UTF-8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c</stringProp>
                  <stringProp name="Argument.value">24</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ch</stringProp>
                  <stringProp name="Argument.value">look to book</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="g" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">g</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}?ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BRAND=PI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="j" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j</stringProp>
                  <stringProp name="Argument.value">1.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="k" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">k</stringProp>
                  <stringProp name="Argument.value">Y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="onl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">onl</stringProp>
                  <stringProp name="Argument.value">0.01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/search.html?searchModel.searchTerm=${P_hotelLocation},%20UK&amp;PLACEID=${C_Place_g2}&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BOOKINGCHANNEL=WEB&amp;SORT=2&amp;VIEW=2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ndh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ndh</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="s" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">s</stringProp>
                  <stringProp name="Argument.value">1536x864</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value">28/6/2022 22:21:46 4 -330</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">N</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v47" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v47</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v49" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v49</stringProp>
                  <stringProp name="Argument.value">First Visit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v1</stringProp>
                  <stringProp name="Argument.value">rochdale</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v3</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pidt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pidt</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v4</stringProp>
                  <stringProp name="Argument.value">07/08/2022</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v5</stringProp>
                  <stringProp name="Argument.value">08/08/2022</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v6</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rdr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rdr</stringProp>
                  <stringProp name="Argument.value">0.01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v7" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v7</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c74" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c74</stringProp>
                  <stringProp name="Argument.value">asia/kolkata</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v8" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v8</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v9" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v9</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="jsonv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">jsonv</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pid</stringProp>
                  <stringProp name="Argument.value">premier inn search results</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageName</stringProp>
                  <stringProp name="Argument.value">premier inn: hotel details</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nsid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">nsid</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aamb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aamb</stringProp>
                  <stringProp name="Argument.value">6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v58" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v58</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v57" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v57</stringProp>
                  <stringProp name="Argument.value">premier inn: hotel details</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="req" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">req</stringProp>
                  <stringProp name="Argument.value">0.33</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="prc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">prc</stringProp>
                  <stringProp name="Argument.value">1.73</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pt." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pt.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="et" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">et</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".pt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.pt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pageIDType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageIDType</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v69" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v69</stringProp>
                  <stringProp name="Argument.value">hotel specific</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">premier inn search results</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="region" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">region</stringProp>
                  <stringProp name="Argument.value">app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".activitymap" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.activitymap</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activitymap." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activitymap.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c11" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c11</stringProp>
                  <stringProp name="Argument.value">D=v11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c10" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c10</stringProp>
                  <stringProp name="Argument.value">D=v10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c13" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c13</stringProp>
                  <stringProp name="Argument.value">D=v13</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c12" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c12</stringProp>
                  <stringProp name="Argument.value">D=v12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c14" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c14</stringProp>
                  <stringProp name="Argument.value">D=v14</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="link" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">link</stringProp>
                  <stringProp name="Argument.value">Rochdale 14 miles from your search From £ 46 View details</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c18" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c18</stringProp>
                  <stringProp name="Argument.value">D=v15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="oid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">oid</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}?ARRdd=07&amp;A</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v122" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v122</stringProp>
                  <stringProp name="Argument.value">OEQQxzuoY8ZkqT84</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v74" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v74</stringProp>
                  <stringProp name="Argument.value">asia/kolkata</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v75" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v75</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}?ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BRAND=PI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tcp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tcp</stringProp>
                  <stringProp name="Argument.value">0.04</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c20" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c20</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/search.html?searchModel.searchTerm=${P_hotelLocation},%20UK&amp;PLACEID=${C_Place_g2}&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BOOKINGCHANNEL=WEB&amp;SORT=2&amp;VIEW=2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c21" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c21</stringProp>
                  <stringProp name="Argument.value">11|11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c24" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c24</stringProp>
                  <stringProp name="Argument.value">not logged-in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c23" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c23</stringProp>
                  <stringProp name="Argument.value">not logged-in: premier inn: hotel details</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ot" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ot</stringProp>
                  <stringProp name="Argument.value">A</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c27" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c27</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="a." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">a.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".a" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.a</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.c</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pf</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".d" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.d</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">b/ss/whitpreminnprod/10/JS-2.22.4-LCUM/s3687821519546</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">${P_TT}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PremierInn_T05_Click_Book_Now" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;NIGHTS=${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_BookID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">C_BookID</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_1}/gb/en/hoteldirectory/${PP_hotelDirectory}/${PP_hotelCode}.web.data" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/hoteldirectory/${PP_hotelDirectory}/${PP_hotelCode}.web.data</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Hotel_Web_Data" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonOutput;

def json = JsonOutput.toJson(prev.getResponseDataAsString()).toString();

vars.put(&quot;PP_hotelWebData&quot;,json.substring(1, json.length() - 1));

//log.info(&quot;Hotel Web Data ---&gt; &quot;+vars.get(&quot;PP_hotelWebData&quot;));</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3373707">name</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_6}/gb/en/booking-a1/extras.html" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/booking-a1/extras.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="760479583">&lt;title&gt;
Choose your meals
&lt;/title&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_6}/gb/en/booking-a1/extras.tpl.html" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/booking-a1/extras.tpl.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1080808591">Visit the Verified by Visa website</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_piUpsell_JS" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">C_piUpsell_JS</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;script src=&quot;/etc/clientlibs/pi-upsell.(.*?)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_publicJS" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">C_publicJS</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;script type=&quot;text/javascript&quot; src=&quot;https://secure2.premierinn.com/public/(.*?)&quot;  &gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_3}/rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;requestId&quot;:&quot;${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,CF_requestID4)}&quot;,&quot;context&quot;:{&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;,&quot;timeOffsetInMinutes&quot;:330,&quot;channel&quot;:&quot;web&quot;,&quot;screen&quot;:{&quot;width&quot;:1536,&quot;height&quot;:864,&quot;orientation&quot;:&quot;landscape&quot;,&quot;colorDepth&quot;:24,&quot;pixelRatio&quot;:1.25},&quot;window&quot;:{&quot;width&quot;:1536,&quot;height&quot;:746},&quot;browser&quot;:{&quot;host&quot;:&quot;secure2.premierinn.com&quot;,&quot;webGLRenderer&quot;:&quot;ANGLE (Intel, Intel(R) Iris(R) Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11)&quot;},&quot;address&quot;:{&quot;url&quot;:&quot;https://${BASE_URL_6}/gb/en/booking-a1/extras.html&quot;,&quot;referringUrl&quot;:&quot;https://${BASE_URL_1}/&quot;}},&quot;id&quot;:{&quot;tntId&quot;:&quot;${CF_sessionID}.31_0&quot;,&quot;marketingCloudVisitorId&quot;:&quot;25764356207244138064059662056462270276&quot;},&quot;experienceCloud&quot;:{&quot;audienceManager&quot;:{&quot;locationHint&quot;:12,&quot;blob&quot;:&quot;6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y&quot;},&quot;analytics&quot;:{&quot;logging&quot;:&quot;server_side&quot;,&quot;supplementalDataId&quot;:&quot;67260B955AB17821-205AFD6111826138&quot;}},&quot;execute&quot;:{&quot;pageLoad&quot;:{}},&quot;prefetch&quot;:{&quot;views&quot;:[{}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_6}/gb/en/hoteldirectory/${PP_hotelDirectory}/${PP_hotelCode}.web.data" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/hoteldirectory/${PP_hotelDirectory}/${PP_hotelCode}.web.data</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3373707">name</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;NIGHTS=${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${__time(,hotelDetailstime)},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_6}/etc/designs/global/dictionaries/labels/i18n.jsondict.en" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">etc/designs/global/dictionaries/labels/i18n.jsondict.en</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="193451388">account.dashboard.and</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//hotelcountries/countries" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/hotelcountries/countries</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="language" elementType="Header">
                  <stringProp name="Header.name">language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="country" elementType="Header">
                  <stringProp name="Header.name">country</stringProp>
                  <stringProp name="Header.value">gb</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="PP_countries" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonOutput;

def json = new groovy.json.JsonSlurper().parseText(prev.getResponseDataAsString());
def finalJson=JsonOutput.toJson(json.countries).replace(&quot;\&quot;&quot;,&quot;\\\&quot;&quot;).toString();

vars.put(&quot;PP_countries&quot;,finalJson);

//log.info(&quot;Countries: &quot;+ vars.get(&quot;PP_countries&quot;));</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1352637108">countries</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//marketing/hotels/regions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/marketing/hotels/regions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="PP_hotelRegions" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonOutput;

def json = new groovy.json.JsonSlurper().parseText(prev.getResponseDataAsString());


for(int i=0;i&lt;json.regions.size();i++){
 json.regions[i] &lt;&lt; [subscribed: false];
}
def finalJson=JsonOutput.toJson(json.regions).replace(&quot;\&quot;&quot;,&quot;\\\&quot;&quot;).toString();

vars.put(&quot;PP_hotelRegions&quot;,finalJson);

//log.info(&quot;Hotel Regions: &quot;+ vars.get(&quot;PP_hotelRegions&quot;));</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1086109695">regions</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;NIGHTS=${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${__time(,regionsTimeStamp)},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;NIGHTS=${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${__time(,countriesTimeStamp)},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_6}/public/${C_publicJS}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">public/${C_publicJS}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_6}etc/clientlibs/pi-upsell.${C_piUpsell_JS}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">etc/clientlibs/pi-upsell.${C_piUpsell_JS}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_6}/etc/designs/global/dictionaries/labels/i18n.jsondict.en" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">etc/designs/global/dictionaries/labels/i18n.jsondict.en</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${__time(,piUpsellsTimeStamp)},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_6}/gb/en/booking-a1/extras.componentlist.bookingflowdata" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/booking-a1/extras.componentlist.bookingflowdata</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1965700204">Choose your meals</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${piUpsellsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,&#xd;
	&quot;wifi&quot;:&quot;{\&quot;timestamp\&quot;:${__time(,wifiTimeStamp)},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[[]]}&quot;,&#xd;
	&quot;hasRenderedPreferedFoodOption&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,&#xd;
	&quot;food&quot;:&quot;{\&quot;timestamp\&quot;:${__time(,foodTimeStamp)},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[{\&quot;adultList\&quot;:[{\&quot;breakfastCode\&quot;:0}],\&quot;childList\&quot;:[]}]}&quot;,&#xd;
	&quot;foodDisplayed&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${piUpsellsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&quot;wifi&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[[]]}&quot;,&#xd;
	&quot;hasRenderedPreferedFoodOption&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&quot;food&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[{\&quot;adultList\&quot;:[{\&quot;breakfastCode\&quot;:0}],\&quot;childList\&quot;:[]}]}&quot;,&#xd;
	&quot;foodDisplayed&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${piUpsellsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&quot;wifi&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[[]]}&quot;,&#xd;
	&quot;hasRenderedPreferedFoodOption&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&quot;food&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[{\&quot;adultList\&quot;:[{\&quot;breakfastCode\&quot;:0}],\&quot;childList\&quot;:[]}]}&quot;,&#xd;
	&quot;foodDisplayed&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${piUpsellsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&quot;wifi&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[[]]}&quot;,&#xd;
	&quot;hasRenderedPreferedFoodOption&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&quot;food&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[{\&quot;adultList\&quot;:[{\&quot;breakfastCode\&quot;:0}],\&quot;childList\&quot;:[]}]}&quot;,&#xd;
	&quot;foodDisplayed&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_3}/rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;requestId&quot;:&quot;${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,CF_requestID5)}&quot;,&quot;context&quot;:{&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;,&quot;timeOffsetInMinutes&quot;:330,&quot;channel&quot;:&quot;web&quot;,&quot;screen&quot;:{&quot;width&quot;:1536,&quot;height&quot;:864,&quot;orientation&quot;:&quot;landscape&quot;,&quot;colorDepth&quot;:24,&quot;pixelRatio&quot;:1.25},&quot;window&quot;:{&quot;width&quot;:1519,&quot;height&quot;:746},&quot;browser&quot;:{&quot;host&quot;:&quot;${BASE_URL_6}&quot;,&quot;webGLRenderer&quot;:&quot;ANGLE (Intel, Intel(R) Iris(R) Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11)&quot;},&quot;address&quot;:{&quot;url&quot;:&quot;https://${BASE_URL_6}/gb/en/booking-a1/extras.html&quot;,&quot;referringUrl&quot;:&quot;https://${BASE_URL_1}/&quot;}},&quot;id&quot;:{&quot;tntId&quot;:&quot;${CF_sessionID}.31_0&quot;,&quot;marketingCloudVisitorId&quot;:&quot;25764356207244138064059662056462270276&quot;},&quot;experienceCloud&quot;:{&quot;audienceManager&quot;:{&quot;locationHint&quot;:12,&quot;blob&quot;:&quot;6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y&quot;},&quot;analytics&quot;:{&quot;logging&quot;:&quot;server_side&quot;,&quot;supplementalDataId&quot;:&quot;67260B955AB17821-205AFD6111826138&quot;}},&quot;execute&quot;:{&quot;mboxes&quot;:[{&quot;index&quot;:0,&quot;name&quot;:&quot;booking-flow-test&quot;}]},&quot;telemetry&quot;:{&quot;entries&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_5}/b/ss/whitpreminnprod/10/JS-2.22.4-LCUM/s31425583317660" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="c31" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c31</stringProp>
                  <stringProp name="Argument.value">New</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c32" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c32</stringProp>
                  <stringProp name="Argument.value">First Visit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cm." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cm.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ssf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ssf</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c38" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c38</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v90" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v90</stringProp>
                  <stringProp name="Argument.value">/gb/en/booking-a1/extras.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aamlh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aamlh</stringProp>
                  <stringProp name="Argument.value">12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v91" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v91</stringProp>
                  <stringProp name="Argument.value">Step: 1: upsell,submitdetails</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AQB" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AQB</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fpCookieDomainPeriods" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fpCookieDomainPeriods</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="apc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">apc</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AQE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AQE</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".cm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.cm</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sdid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sdid</stringProp>
                  <stringProp name="Argument.value">67260B955AB17821-205AFD6111826138</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v15" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v15</stringProp>
                  <stringProp name="Argument.value">aem 5.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="events" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">events</stringProp>
                  <stringProp name="Argument.value">event23,scOpen,event120,event284,event285,event286</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c45" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c45</stringProp>
                  <stringProp name="Argument.value">D=s.version</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c47" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c47</stringProp>
                  <stringProp name="Argument.value">extra large | aem 5.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="dns" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">dns</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cdp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cdp</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pfi" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pfi</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v27" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v27</stringProp>
                  <stringProp name="Argument.value">New</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="server" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">server</stringProp>
                  <stringProp name="Argument.value">castor</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c55" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c55</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bh</stringProp>
                  <stringProp name="Argument.value">746</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">25764356207244138064059662056462270276</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="d." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">d.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rsp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rsp</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="products" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">products</stringProp>
                  <stringProp name="Argument.value">;${PP_hotelCode};;;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bw</stringProp>
                  <stringProp name="Argument.value">1536</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v34" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v34</stringProp>
                  <stringProp name="Argument.value">not logged-in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tot" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tot</stringProp>
                  <stringProp name="Argument.value">12.49</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v36" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v36</stringProp>
                  <stringProp name="Argument.value">+1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v35" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v35</stringProp>
                  <stringProp name="Argument.value">0fb7a926-0302-49b6-922b-5c125fd0ed64:0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v38" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v38</stringProp>
                  <stringProp name="Argument.value">31|31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v37" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v37</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}?ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BRAND=PI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c60" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c60</stringProp>
                  <stringProp name="Argument.value">22:21:58</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c61" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c61</stringProp>
                  <stringProp name="Argument.value">${PP_sessionId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cc</stringProp>
                  <stringProp name="Argument.value">GBP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="mcorgid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mcorgid</stringProp>
                  <stringProp name="Argument.value">178D467352784DDC0A490D45@AdobeOrg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ce</stringProp>
                  <stringProp name="Argument.value">UTF-8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c</stringProp>
                  <stringProp name="Argument.value">24</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ch</stringProp>
                  <stringProp name="Argument.value">booking flow</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="g" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">g</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_6}/gb/en/booking-a1/extras.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="j" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j</stringProp>
                  <stringProp name="Argument.value">1.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="k" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">k</stringProp>
                  <stringProp name="Argument.value">Y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="onl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">onl</stringProp>
                  <stringProp name="Argument.value">0.03</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v41" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v41</stringProp>
                  <stringProp name="Argument.value">RT-DBS-61.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ndh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ndh</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="s" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">s</stringProp>
                  <stringProp name="Argument.value">1536x864</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value">28/6/2022 22:21:58 4 -330</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">N</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v44" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v44</stringProp>
                  <stringProp name="Argument.value">D=s.version</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v47" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v47</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v49" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v49</stringProp>
                  <stringProp name="Argument.value">First Visit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pidt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pidt</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c75" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c75</stringProp>
                  <stringProp name="Argument.value">D=v91</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rdr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rdr</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c74" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c74</stringProp>
                  <stringProp name="Argument.value">asia/kolkata</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="jsonv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">jsonv</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pid</stringProp>
                  <stringProp name="Argument.value">premier inn: hotel details</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageName</stringProp>
                  <stringProp name="Argument.value">en: booking extras</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="nsid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">nsid</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="aamb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aamb</stringProp>
                  <stringProp name="Argument.value">6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v58" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v58</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_6}/gb/en/booking-a1/extras.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v57" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v57</stringProp>
                  <stringProp name="Argument.value">D=pageName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="req" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">req</stringProp>
                  <stringProp name="Argument.value">0.36</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="prc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">prc</stringProp>
                  <stringProp name="Argument.value">12.05</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pt." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pt.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="et" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">et</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name=".pt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.pt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageIDType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageIDType</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">premier inn: hotel details</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="region" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">region</stringProp>
                  <stringProp name="Argument.value">hotel-info-root</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name=".activitymap" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.activitymap</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="activitymap." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activitymap.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="link" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">link</stringProp>
                  <stringProp name="Argument.value">Book now</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c18" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c18</stringProp>
                  <stringProp name="Argument.value">D=v15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="oid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">oid</stringProp>
                  <stringProp name="Argument.value">function(a){varp=b.Xa(c,a,e,m);returnb.Tg(f,p,this,arguments)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v122" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v122</stringProp>
                  <stringProp name="Argument.value">OEQQxzuoY8ZkqT84</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v74" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v74</stringProp>
                  <stringProp name="Argument.value">asia/kolkata</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v75" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v75</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_6}/gb/en/booking-a1/extras.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v78" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v78</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v77" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v77</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="oidt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">oidt</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tcp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tcp</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c20" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c20</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}?ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;ARRyyyy=${PP_arrivalYear}&amp;${PP_nights}&amp;ROOMS=1&amp;ADULT1=1&amp;CHILD1=0&amp;COT1=0&amp;INTTYP1=DB&amp;BRAND=PI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c21" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c21</stringProp>
                  <stringProp name="Argument.value">31|31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c24" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c24</stringProp>
                  <stringProp name="Argument.value">not logged-in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c23" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c23</stringProp>
                  <stringProp name="Argument.value">not logged-in: </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ot" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ot</stringProp>
                  <stringProp name="Argument.value">BUTTON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c27" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c27</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_6}/gb/en/booking-a1/extras.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="a." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">a.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name=".a" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.a</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name=".c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.c</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pf</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name=".d" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.d</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">b/ss/whitpreminnprod/10/JS-2.22.4-LCUM/s31425583317660</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">${P_TT}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PremierInn_T06_Continue_To_Your_Details" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${piUpsellsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;wifi&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[[]]}&quot;,&#xd;
	&quot;hasRenderedPreferedFoodOption&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;food&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[{\&quot;adultList\&quot;:[{\&quot;breakfastCode\&quot;:0}],\&quot;childList\&quot;:[]}]}&quot;,&#xd;
	&quot;foodDisplayed&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;},&#xd;
	&quot;yourDetails&quot;:&quot;{\&quot;timestamp\&quot;:${__time(,yourDetailsTimeStamp)},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:900000,\&quot;data\&quot;:{\&quot;booker\&quot;:{\&quot;address\&quot;:{},\&quot;title\&quot;:\&quot;\&quot;},\&quot;guests\&quot;:[{\&quot;roomNumber\&quot;:\&quot;1\&quot;,\&quot;roomType\&quot;:\&quot;Double\&quot;,\&quot;adults\&quot;:1,\&quot;children\&quot;:0,\&quot;cotRequired\&quot;:false,\&quot;title\&quot;:\&quot;\&quot;,\&quot;firstName\&quot;:\&quot;\&quot;,\&quot;lastName\&quot;:\&quot;\&quot;,\&quot;manualGuestEntry\&quot;:false,\&quot;selected\&quot;:true}],\&quot;newsletter\&quot;:null,\&quot;isBusinessTrip\&quot;:null,\&quot;electronicInvoiceRequired\&quot;:true,\&quot;smsConfirmation\&quot;:false,\&quot;showBookingForSomeoneElse\&quot;:true,\&quot;savedGuestsDetails\&quot;:{},\&quot;reserveTableData\&quot;:{},\&quot;registerStatus\&quot;:false}}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${piUpsellsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;wifi&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[[]]}&quot;,&#xd;
	&quot;hasRenderedPreferedFoodOption&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;food&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[{\&quot;adultList\&quot;:[{\&quot;breakfastCode\&quot;:0}],\&quot;childList\&quot;:[]}]}&quot;,&#xd;
	&quot;foodDisplayed&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;},&#xd;
	&quot;yourDetails&quot;:&quot;{\&quot;timestamp\&quot;:${yourDetailsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:900000,\&quot;data\&quot;:{\&quot;booker\&quot;:{\&quot;address\&quot;:{},\&quot;title\&quot;:\&quot;\&quot;},\&quot;guests\&quot;:[{\&quot;roomNumber\&quot;:\&quot;1\&quot;,\&quot;roomType\&quot;:\&quot;Double\&quot;,\&quot;adults\&quot;:1,\&quot;children\&quot;:0,\&quot;cotRequired\&quot;:false,\&quot;title\&quot;:\&quot;\&quot;,\&quot;firstName\&quot;:\&quot;\&quot;,\&quot;lastName\&quot;:\&quot;\&quot;,\&quot;manualGuestEntry\&quot;:false,\&quot;selected\&quot;:true}],\&quot;newsletter\&quot;:null,\&quot;isBusinessTrip\&quot;:null,\&quot;electronicInvoiceRequired\&quot;:true,\&quot;smsConfirmation\&quot;:false,\&quot;showBookingForSomeoneElse\&quot;:true,\&quot;savedGuestsDetails\&quot;:{},\&quot;reserveTableData\&quot;:{},\&quot;registerStatus\&quot;:false}}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_6}/gb/en/booking-a1/yourdetails.tpl.html" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/booking-a1/yourdetails.tpl.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_3}/rest/v1/delivery?client=whitbreadgroup&amp;sessionId=1b70504f3eda4162af4f7a8c131cd41d&amp;version=2.8.2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;requestId&quot;:&quot;${CF_requestID4}&quot;,&quot;context&quot;:{&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;,&quot;timeOffsetInMinutes&quot;:330,&quot;channel&quot;:&quot;web&quot;,&quot;screen&quot;:{&quot;width&quot;:1536,&quot;height&quot;:864,&quot;orientation&quot;:&quot;landscape&quot;,&quot;colorDepth&quot;:24,&quot;pixelRatio&quot;:1.25},&quot;window&quot;:{&quot;width&quot;:1519,&quot;height&quot;:746},&quot;browser&quot;:{&quot;host&quot;:&quot;secure2.premierinn.com&quot;,&quot;webGLRenderer&quot;:&quot;ANGLE (Intel, Intel(R) Iris(R) Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11)&quot;},&quot;address&quot;:{&quot;url&quot;:&quot;https://${BASE_URL_6}/gb/en/booking-a1/yourdetails.html&quot;,&quot;referringUrl&quot;:&quot;https://${BASE_URL_1}/&quot;}},&quot;id&quot;:{&quot;tntId&quot;:&quot;${CF_sessionID}.31_0&quot;,&quot;marketingCloudVisitorId&quot;:&quot;25764356207244138064059662056462270276&quot;},&quot;experienceCloud&quot;:{&quot;audienceManager&quot;:{&quot;locationHint&quot;:12,&quot;blob&quot;:&quot;6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y&quot;},&quot;analytics&quot;:{&quot;logging&quot;:&quot;server_side&quot;,&quot;supplementalDataId&quot;:&quot;7827DBAD1D8363BA-617D7069DD236639&quot;}},&quot;execute&quot;:{&quot;mboxes&quot;:[{&quot;index&quot;:0,&quot;name&quot;:&quot;Header-Config&quot;}]},&quot;telemetry&quot;:{&quot;entries&quot;:[{&quot;requestId&quot;:3198432,&quot;timestamp&quot;:${__time(,)},&quot;execution&quot;:7.3},{&quot;execution&quot;:73.4,&quot;parsing&quot;:0.1,&quot;request&quot;:{&quot;timeToFirstByte&quot;:66.4,&quot;download&quot;:0.9,&quot;responseSize&quot;:319},&quot;telemetryServerToken&quot;:&quot;cJWuCgDiaU1IgPqDGhBbFED2EX07VODPHUW1TU+2Foc=&quot;,&quot;mode&quot;:&quot;edge&quot;,&quot;features&quot;:{&quot;executeMboxCount&quot;:1,&quot;decisioningMethod&quot;:&quot;server-side&quot;},&quot;requestId&quot;:&quot;2375f926bcd2484facbd18ea37447e4d&quot;,&quot;timestamp&quot;:${__time(,)}},{&quot;execution&quot;:78,&quot;parsing&quot;:0,&quot;request&quot;:{&quot;timeToFirstByte&quot;:68.6,&quot;download&quot;:1.2,&quot;responseSize&quot;:537},&quot;telemetryServerToken&quot;:&quot;cJWuCgDiaU1IgPqDGhBbFED2EX07VODPHUW1TU+2Foc=&quot;,&quot;mode&quot;:&quot;edge&quot;,&quot;features&quot;:{&quot;executePageLoad&quot;:true,&quot;prefetchViewCount&quot;:1,&quot;decisioningMethod&quot;:&quot;server-side&quot;},&quot;requestId&quot;:&quot;${CF_requestID5}&quot;,&quot;timestamp&quot;:${__time(,)}}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${piUpsellsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;wifi&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[[]]}&quot;,&#xd;
	&quot;hasRenderedPreferedFoodOption&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;food&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[{\&quot;adultList\&quot;:[{\&quot;breakfastCode\&quot;:0}],\&quot;childList\&quot;:[]}]}&quot;,&#xd;
	&quot;foodDisplayed&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;},&#xd;
	&quot;yourDetails&quot;:&quot;{\&quot;timestamp\&quot;:${__time(,yourDetails1TimeStamp)},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:900000,\&quot;data\&quot;:{\&quot;booker\&quot;:{\&quot;address\&quot;:{\&quot;dialingCode\&quot;:\&quot;+44\&quot;,\&quot;dialingCountryCode\&quot;:\&quot;GB\&quot;},\&quot;title\&quot;:\&quot;\&quot;},\&quot;guests\&quot;:[{\&quot;roomNumber\&quot;:\&quot;1\&quot;,\&quot;roomType\&quot;:\&quot;Double\&quot;,\&quot;adults\&quot;:1,\&quot;children\&quot;:0,\&quot;cotRequired\&quot;:false,\&quot;title\&quot;:\&quot;\&quot;,\&quot;firstName\&quot;:\&quot;\&quot;,\&quot;lastName\&quot;:\&quot;\&quot;,\&quot;manualGuestEntry\&quot;:false,\&quot;selected\&quot;:true}],\&quot;newsletter\&quot;:{\&quot;regions\&quot;:[{\&quot;id\&quot;:\&quot;1\&quot;,\&quot;description\&quot;:\&quot;UK &amp; Ireland\&quot;,\&quot;active\&quot;:true,\&quot;subscribed\&quot;:true},{\&quot;id\&quot;:\&quot;2\&quot;,\&quot;description\&quot;:\&quot;Dubai\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;3\&quot;,\&quot;description\&quot;:\&quot;India\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;4\&quot;,\&quot;description\&quot;:\&quot;hub by Premier Inn\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;5\&quot;,\&quot;description\&quot;:\&quot;Germany\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;6\&quot;,\&quot;description\&quot;:\&quot;German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;7\&quot;,\&quot;description\&quot;:\&quot;Non German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:true}],\&quot;receiveRestaurantInfo\&quot;:false},\&quot;isBusinessTrip\&quot;:null,\&quot;electronicInvoiceRequired\&quot;:true,\&quot;smsConfirmation\&quot;:false,\&quot;showBookingForSomeoneElse\&quot;:true,\&quot;savedGuestsDetails\&quot;:{},\&quot;reserveTableData\&quot;:{},\&quot;registerStatus\&quot;:false}}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_6}/gb/en/booking-a1/yourdetails.componentlist.bookingflowdata" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/booking-a1/yourdetails.componentlist.bookingflowdata</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1089777525">Your details</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//booking/hotels/LGRfu8fYfcF8WjfG/hold?bookingChannel=WEB" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;sessionId&quot;:&quot;${PP_sessionId}&quot;,&quot;hotelCode&quot;:&quot;${PP_hotelCode}&quot;,&quot;arrival&quot;:&quot;${PP_arrivalDate}&quot;,&quot;departure&quot;:&quot;${PP_departureDate}&quot;,&quot;rooms&quot;:[{&quot;adults&quot;:1,&quot;children&quot;:0,&quot;cot&quot;:false,&quot;lettingType&quot;:${PP_flexLettingType},&quot;roomNumber&quot;:&quot;1&quot;,&quot;type&quot;:&quot;DB&quot;}],&quot;hotelUpsell&quot;:true,&quot;rateCode&quot;:&quot;${PP_flexRoomCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/booking/hotels/${PP_sessionId}/hold?bookingChannel=WEB</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="bookingChannel" elementType="Header">
                  <stringProp name="Header.name">bookingChannel</stringProp>
                  <stringProp name="Header.value">WEB</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="607796817">sessionId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${piUpsellsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;wifi&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[[]]}&quot;,&#xd;
	&quot;hasRenderedPreferedFoodOption&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;food&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[{\&quot;adultList\&quot;:[{\&quot;breakfastCode\&quot;:0}],\&quot;childList\&quot;:[]}]}&quot;,&#xd;
	&quot;foodDisplayed&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;},&#xd;
	&quot;yourDetails&quot;:&quot;{\&quot;timestamp\&quot;:${yourDetails1TimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:900000,\&quot;data\&quot;:{\&quot;booker\&quot;:{\&quot;address\&quot;:{\&quot;dialingCode\&quot;:\&quot;+44\&quot;,\&quot;dialingCountryCode\&quot;:\&quot;GB\&quot;},\&quot;title\&quot;:\&quot;\&quot;},\&quot;guests\&quot;:[{\&quot;roomNumber\&quot;:\&quot;1\&quot;,\&quot;roomType\&quot;:\&quot;Double\&quot;,\&quot;adults\&quot;:1,\&quot;children\&quot;:0,\&quot;cotRequired\&quot;:false,\&quot;title\&quot;:\&quot;\&quot;,\&quot;firstName\&quot;:\&quot;\&quot;,\&quot;lastName\&quot;:\&quot;\&quot;,\&quot;manualGuestEntry\&quot;:false,\&quot;selected\&quot;:true}],\&quot;newsletter\&quot;:{\&quot;regions\&quot;:[{\&quot;id\&quot;:\&quot;1\&quot;,\&quot;description\&quot;:\&quot;UK &amp; Ireland\&quot;,\&quot;active\&quot;:true,\&quot;subscribed\&quot;:true},{\&quot;id\&quot;:\&quot;2\&quot;,\&quot;description\&quot;:\&quot;Dubai\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;3\&quot;,\&quot;description\&quot;:\&quot;India\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;4\&quot;,\&quot;description\&quot;:\&quot;hub by Premier Inn\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;5\&quot;,\&quot;description\&quot;:\&quot;Germany\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;6\&quot;,\&quot;description\&quot;:\&quot;German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;7\&quot;,\&quot;description\&quot;:\&quot;Non German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:true}],\&quot;receiveRestaurantInfo\&quot;:false},\&quot;isBusinessTrip\&quot;:null,\&quot;electronicInvoiceRequired\&quot;:true,\&quot;smsConfirmation\&quot;:false,\&quot;showBookingForSomeoneElse\&quot;:true,\&quot;savedGuestsDetails\&quot;:{},\&quot;reserveTableData\&quot;:{},\&quot;registerStatus\&quot;:false}}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_3}/rest/v1/delivery?client=whitbreadgroup&amp;sessionId=1b70504f3eda4162af4f7a8c131cd41d&amp;version=2.8.2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;requestId&quot;:&quot;${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,CF_requestID6)}&quot;,&quot;context&quot;:{&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;,&quot;timeOffsetInMinutes&quot;:330,&quot;channel&quot;:&quot;web&quot;,&quot;screen&quot;:{&quot;width&quot;:1536,&quot;height&quot;:864,&quot;orientation&quot;:&quot;landscape&quot;,&quot;colorDepth&quot;:24,&quot;pixelRatio&quot;:1.25},&quot;window&quot;:{&quot;width&quot;:1519,&quot;height&quot;:746},&quot;browser&quot;:{&quot;host&quot;:&quot;secure2.premierinn.com&quot;,&quot;webGLRenderer&quot;:&quot;ANGLE (Intel, Intel(R) Iris(R) Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11)&quot;},&quot;address&quot;:{&quot;url&quot;:&quot;https://${BASE_URL_6}/gb/en/booking-a1/yourdetails.html&quot;,&quot;referringUrl&quot;:&quot;https://${BASE_URL_1}/&quot;}},&quot;id&quot;:{&quot;tntId&quot;:&quot;${CF_sessionID}.31_0&quot;,&quot;marketingCloudVisitorId&quot;:&quot;25764356207244138064059662056462270276&quot;},&quot;experienceCloud&quot;:{&quot;audienceManager&quot;:{&quot;locationHint&quot;:12,&quot;blob&quot;:&quot;6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y&quot;},&quot;analytics&quot;:{&quot;logging&quot;:&quot;server_side&quot;,&quot;supplementalDataId&quot;:&quot;7827DBAD1D8363BA-617D7069DD236639&quot;}},&quot;execute&quot;:{&quot;mboxes&quot;:[{&quot;index&quot;:0,&quot;name&quot;:&quot;booking-flow-test&quot;}]},&quot;telemetry&quot;:{&quot;entries&quot;:[{&quot;execution&quot;:49.3,&quot;parsing&quot;:0,&quot;request&quot;:{&quot;timeToFirstByte&quot;:42.6,&quot;download&quot;:0.8,&quot;responseSize&quot;:320},&quot;telemetryServerToken&quot;:&quot;6TAR7trXEfvIpU3pjYt+RW+DZ01uBGk+S/iOWVzz8uw=&quot;,&quot;mode&quot;:&quot;edge&quot;,&quot;features&quot;:{&quot;executeMboxCount&quot;:1,&quot;decisioningMethod&quot;:&quot;server-side&quot;},&quot;requestId&quot;:&quot;${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,)}&quot;,&quot;timestamp&quot;:${__time(,)}}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_5}/b/ss/whitpreminnprod/10/JS-2.22.4-LCUM/s33954627375315" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="c31" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c31</stringProp>
                  <stringProp name="Argument.value">New</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c32" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c32</stringProp>
                  <stringProp name="Argument.value">First Visit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cm." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cm.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ssf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ssf</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c38" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c38</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v90" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v90</stringProp>
                  <stringProp name="Argument.value">/gb/en/booking-a1/yourdetails.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aamlh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aamlh</stringProp>
                  <stringProp name="Argument.value">12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v91" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v91</stringProp>
                  <stringProp name="Argument.value">Step: 2: loginregisterauth0,reasonforstay,contactdetails,addresslookup,contactpreference,email,submitdetails,previousstep</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AQB" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AQB</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fpCookieDomainPeriods" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fpCookieDomainPeriods</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="apc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">apc</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AQE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AQE</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".cm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.cm</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sdid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sdid</stringProp>
                  <stringProp name="Argument.value">7827DBAD1D8363BA-617D7069DD236639</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v15" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v15</stringProp>
                  <stringProp name="Argument.value">aem 5.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="events" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">events</stringProp>
                  <stringProp name="Argument.value">event23,scAdd,event120,event284,event285,event286</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c45" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c45</stringProp>
                  <stringProp name="Argument.value">D=s.version</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c48" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c48</stringProp>
                  <stringProp name="Argument.value">extras</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c47" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c47</stringProp>
                  <stringProp name="Argument.value">extra large | aem 5.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="dns" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">dns</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cdp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cdp</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pfi" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pfi</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v27" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v27</stringProp>
                  <stringProp name="Argument.value">New</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="server" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">server</stringProp>
                  <stringProp name="Argument.value">castor</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c55" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c55</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bh</stringProp>
                  <stringProp name="Argument.value">746</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">25764356207244138064059662056462270276</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="d." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">d.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rsp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rsp</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="products" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">products</stringProp>
                  <stringProp name="Argument.value">;${PP_hotelCode};;;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bw</stringProp>
                  <stringProp name="Argument.value">1536</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v34" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v34</stringProp>
                  <stringProp name="Argument.value">not logged-in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tot" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tot</stringProp>
                  <stringProp name="Argument.value">1.90</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v36" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v36</stringProp>
                  <stringProp name="Argument.value">+1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v35" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v35</stringProp>
                  <stringProp name="Argument.value">0fb7a926-0302-49b6-922b-5c125fd0ed64:0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v38" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v38</stringProp>
                  <stringProp name="Argument.value">42|42</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v37" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v37</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_6}/gb/en/booking-a1/extras.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c60" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c60</stringProp>
                  <stringProp name="Argument.value">22:22:09</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c61" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c61</stringProp>
                  <stringProp name="Argument.value">${PP_sessionId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cc</stringProp>
                  <stringProp name="Argument.value">GBP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="mcorgid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mcorgid</stringProp>
                  <stringProp name="Argument.value">178D467352784DDC0A490D45@AdobeOrg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ce</stringProp>
                  <stringProp name="Argument.value">UTF-8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c</stringProp>
                  <stringProp name="Argument.value">24</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ch</stringProp>
                  <stringProp name="Argument.value">booking flow</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="g" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">g</stringProp>
                  <stringProp name="Argument.value">https://secure2.premierinn.com/gb/en/booking-a1/yourdetails.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="j" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j</stringProp>
                  <stringProp name="Argument.value">1.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="k" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">k</stringProp>
                  <stringProp name="Argument.value">Y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="onl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">onl</stringProp>
                  <stringProp name="Argument.value">0.01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v41" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v41</stringProp>
                  <stringProp name="Argument.value">RT-DBS-61.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ndh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ndh</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="s" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">s</stringProp>
                  <stringProp name="Argument.value">1536x864</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value">28/6/2022 22:22:9 4 -330</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">N</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v44" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v44</stringProp>
                  <stringProp name="Argument.value">D=s.version</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v47" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v47</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v49" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v49</stringProp>
                  <stringProp name="Argument.value">First Visit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pidt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pidt</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c75" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c75</stringProp>
                  <stringProp name="Argument.value">D=v91</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rdr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rdr</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c74" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c74</stringProp>
                  <stringProp name="Argument.value">asia/kolkata</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="jsonv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">jsonv</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pid</stringProp>
                  <stringProp name="Argument.value">en: booking extras</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageName</stringProp>
                  <stringProp name="Argument.value">en: booking yourdetails</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="nsid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">nsid</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="aamb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aamb</stringProp>
                  <stringProp name="Argument.value">6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v58" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v58</stringProp>
                  <stringProp name="Argument.value">https://secure2.premierinn.com/gb/en/booking-a1/yourdetails.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v57" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v57</stringProp>
                  <stringProp name="Argument.value">D=pageName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="req" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">req</stringProp>
                  <stringProp name="Argument.value">0.34</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="prc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">prc</stringProp>
                  <stringProp name="Argument.value">1.49</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pt." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pt.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="et" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">et</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lrt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lrt</stringProp>
                  <stringProp name="Argument.value">98</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name=".pt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.pt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageIDType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageIDType</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">en: booking extras</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="region" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">region</stringProp>
                  <stringProp name="Argument.value">booking-flow-form</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name=".activitymap" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.activitymap</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="activitymap." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activitymap.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="link" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">link</stringProp>
                  <stringProp name="Argument.value">Continue</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c18" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c18</stringProp>
                  <stringProp name="Argument.value">D=v15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="oid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">oid</stringProp>
                  <stringProp name="Argument.value">Continue</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v122" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v122</stringProp>
                  <stringProp name="Argument.value">OEQQxzuoY8ZkqT84</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v74" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v74</stringProp>
                  <stringProp name="Argument.value">asia/kolkata</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v75" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v75</stringProp>
                  <stringProp name="Argument.value">https://secure2.premierinn.com/gb/en/booking-a1/yourdetails.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v78" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v78</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v77" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v77</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="oidt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">oidt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tcp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tcp</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c20" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c20</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_6}/gb/en/booking-a1/extras.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c21" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c21</stringProp>
                  <stringProp name="Argument.value">42|42</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c24" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c24</stringProp>
                  <stringProp name="Argument.value">not logged-in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c23" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c23</stringProp>
                  <stringProp name="Argument.value">not logged-in: extras</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ot" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ot</stringProp>
                  <stringProp name="Argument.value">SUBMIT</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c27" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c27</stringProp>
                  <stringProp name="Argument.value">https://secure2.premierinn.com/gb/en/booking-a1/yourdetails.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="a." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">a.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name=".a" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.a</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name=".c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.c</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pf</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name=".d" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.d</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">b/ss/whitpreminnprod/10/JS-2.22.4-LCUM/s33954627375315</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">${P_TT}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PremierInn_T07_Continue_To_Payment" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${piUpsellsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;wifi&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[[]]}&quot;,&#xd;
	&quot;hasRenderedPreferedFoodOption&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;food&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[{\&quot;adultList\&quot;:[{\&quot;breakfastCode\&quot;:0}],\&quot;childList\&quot;:[]}]}&quot;,&#xd;
	&quot;foodDisplayed&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;},&#xd;
	&quot;yourDetails&quot;:&quot;{\&quot;timestamp\&quot;:${__time(,yourDetails2TimeStamp)},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:900000,\&quot;data\&quot;:{\&quot;booker\&quot;:{\&quot;address\&quot;:{\&quot;dialingCode\&quot;:\&quot;+91\&quot;,\&quot;dialingCountryCode\&quot;:\&quot;IND\&quot;,\&quot;countryCode\&quot;:\&quot;IND\&quot;,\&quot;countryCodeISO\&quot;:\&quot;IN\&quot;,\&quot;type\&quot;:\&quot;HOME\&quot;,\&quot;line1\&quot;:\&quot;${__RandomString(11,abcdefghijklmnopqrstuvwxyz,PF_line1)}\&quot;,\&quot;postcode\&quot;:\&quot;${__RandomString(6,1234567890,PF_postcode)}\&quot;},\&quot;title\&quot;:\&quot;Mr\&quot;,\&quot;firstName\&quot;:\&quot;${__RandomString(5,abcdefghijklmnopqrstuvwxyz,PF_firstName)}\&quot;,\&quot;lastName\&quot;:\&quot;${__RandomString(4,abcdefghijklmnopqrstuvwxyz,PF_lastName)}\&quot;,\&quot;emailAddress\&quot;:\&quot;${PF_lastName}${PF_firstName}783@gmail.com\&quot;,\&quot;mobileNumber\&quot;:\&quot;${__RandomString(10,1234567890,PF_MobileNumber)}\&quot;},\&quot;guests\&quot;:[{\&quot;roomNumber\&quot;:\&quot;1\&quot;,\&quot;roomType\&quot;:\&quot;Double\&quot;,\&quot;adults\&quot;:1,\&quot;children\&quot;:0,\&quot;cotRequired\&quot;:false,\&quot;title\&quot;:\&quot;\&quot;,\&quot;firstName\&quot;:\&quot;\&quot;,\&quot;lastName\&quot;:\&quot;\&quot;,\&quot;manualGuestEntry\&quot;:false,\&quot;selected\&quot;:true}],\&quot;newsletter\&quot;:{\&quot;regions\&quot;:[{\&quot;id\&quot;:\&quot;1\&quot;,\&quot;description\&quot;:\&quot;UK &amp; Ireland\&quot;,\&quot;active\&quot;:true,\&quot;subscribed\&quot;:true},{\&quot;id\&quot;:\&quot;2\&quot;,\&quot;description\&quot;:\&quot;Dubai\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;3\&quot;,\&quot;description\&quot;:\&quot;India\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;4\&quot;,\&quot;description\&quot;:\&quot;hub by Premier Inn\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;5\&quot;,\&quot;description\&quot;:\&quot;Germany\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;6\&quot;,\&quot;description\&quot;:\&quot;German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;7\&quot;,\&quot;description\&quot;:\&quot;Non German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:true}],\&quot;receiveRestaurantInfo\&quot;:false},\&quot;isBusinessTrip\&quot;:false,\&quot;electronicInvoiceRequired\&quot;:true,\&quot;smsConfirmation\&quot;:false,\&quot;showBookingForSomeoneElse\&quot;:true,\&quot;savedGuestsDetails\&quot;:{},\&quot;reserveTableData\&quot;:{},\&quot;registerStatus\&quot;:false,\&quot;booker.mobileNumber\&quot;:\&quot;${PF_MobileNumber}\&quot;}}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${piUpsellsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;wifi&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[[]]}&quot;,&#xd;
	&quot;hasRenderedPreferedFoodOption&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;food&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[{\&quot;adultList\&quot;:[{\&quot;breakfastCode\&quot;:0}],\&quot;childList\&quot;:[]}]}&quot;,&#xd;
	&quot;foodDisplayed&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;},&#xd;
	&quot;yourDetails&quot;:&quot;{\&quot;timestamp\&quot;:${yourDetails2TimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:900000,\&quot;data\&quot;:{\&quot;booker\&quot;:{\&quot;address\&quot;:{\&quot;dialingCode\&quot;:\&quot;+91\&quot;,\&quot;dialingCountryCode\&quot;:\&quot;IND\&quot;,\&quot;countryCode\&quot;:\&quot;IND\&quot;,\&quot;countryCodeISO\&quot;:\&quot;IN\&quot;,\&quot;type\&quot;:\&quot;HOME\&quot;,\&quot;line1\&quot;:\&quot;${PF_line1}\&quot;,\&quot;postcode\&quot;:\&quot;${PF_postcode}\&quot;},\&quot;title\&quot;:\&quot;Mr\&quot;,\&quot;firstName\&quot;:\&quot;${PF_firstName}\&quot;,\&quot;lastName\&quot;:\&quot;${PF_lastName}\&quot;,\&quot;emailAddress\&quot;:\&quot;${PF_lastName}${PF_firstName}783@gmail.com\&quot;,\&quot;mobileNumber\&quot;:\&quot;${PF_MobileNumber}\&quot;},\&quot;guests\&quot;:[{\&quot;roomNumber\&quot;:\&quot;1\&quot;,\&quot;roomType\&quot;:\&quot;Double\&quot;,\&quot;adults\&quot;:1,\&quot;children\&quot;:0,\&quot;cotRequired\&quot;:false,\&quot;title\&quot;:\&quot;\&quot;,\&quot;firstName\&quot;:\&quot;\&quot;,\&quot;lastName\&quot;:\&quot;\&quot;,\&quot;manualGuestEntry\&quot;:false,\&quot;selected\&quot;:true}],\&quot;newsletter\&quot;:{\&quot;regions\&quot;:[{\&quot;id\&quot;:\&quot;1\&quot;,\&quot;description\&quot;:\&quot;UK &amp; Ireland\&quot;,\&quot;active\&quot;:true,\&quot;subscribed\&quot;:true},{\&quot;id\&quot;:\&quot;2\&quot;,\&quot;description\&quot;:\&quot;Dubai\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;3\&quot;,\&quot;description\&quot;:\&quot;India\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;4\&quot;,\&quot;description\&quot;:\&quot;hub by Premier Inn\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;5\&quot;,\&quot;description\&quot;:\&quot;Germany\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;6\&quot;,\&quot;description\&quot;:\&quot;German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;7\&quot;,\&quot;description\&quot;:\&quot;Non German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:true}],\&quot;receiveRestaurantInfo\&quot;:false},\&quot;isBusinessTrip\&quot;:false,\&quot;electronicInvoiceRequired\&quot;:true,\&quot;smsConfirmation\&quot;:false,\&quot;showBookingForSomeoneElse\&quot;:true,\&quot;savedGuestsDetails\&quot;:{},\&quot;reserveTableData\&quot;:{},\&quot;registerStatus\&quot;:false,\&quot;booker.mobileNumber\&quot;:\&quot;${PF_MobileNumber}\&quot;}}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${piUpsellsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;wifi&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[[]]}&quot;,&#xd;
	&quot;hasRenderedPreferedFoodOption&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;food&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[{\&quot;adultList\&quot;:[{\&quot;breakfastCode\&quot;:0}],\&quot;childList\&quot;:[]}]}&quot;,&#xd;
	&quot;foodDisplayed&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;},&#xd;
	&quot;yourDetails&quot;:&quot;{\&quot;timestamp\&quot;:${yourDetails2TimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:900000,\&quot;data\&quot;:{\&quot;booker\&quot;:{\&quot;address\&quot;:{\&quot;dialingCode\&quot;:\&quot;+91\&quot;,\&quot;dialingCountryCode\&quot;:\&quot;IND\&quot;,\&quot;countryCode\&quot;:\&quot;IND\&quot;,\&quot;countryCodeISO\&quot;:\&quot;IN\&quot;,\&quot;type\&quot;:\&quot;HOME\&quot;,\&quot;line1\&quot;:\&quot;${PF_line1}\&quot;,\&quot;postcode\&quot;:\&quot;${PF_postcode}\&quot;},\&quot;title\&quot;:\&quot;Mr\&quot;,\&quot;firstName\&quot;:\&quot;${PF_firstName}\&quot;,\&quot;lastName\&quot;:\&quot;${PF_lastName}\&quot;,\&quot;emailAddress\&quot;:\&quot;${PF_lastName}${PF_firstName}783@gmail.com\&quot;,\&quot;mobileNumber\&quot;:\&quot;${PF_MobileNumber}\&quot;},\&quot;guests\&quot;:[{\&quot;roomNumber\&quot;:\&quot;1\&quot;,\&quot;roomType\&quot;:\&quot;Double\&quot;,\&quot;adults\&quot;:1,\&quot;children\&quot;:0,\&quot;cotRequired\&quot;:false,\&quot;title\&quot;:\&quot;\&quot;,\&quot;firstName\&quot;:\&quot;\&quot;,\&quot;lastName\&quot;:\&quot;\&quot;,\&quot;manualGuestEntry\&quot;:false,\&quot;selected\&quot;:true}],\&quot;newsletter\&quot;:{\&quot;regions\&quot;:[{\&quot;id\&quot;:\&quot;1\&quot;,\&quot;description\&quot;:\&quot;UK &amp; Ireland\&quot;,\&quot;active\&quot;:true,\&quot;subscribed\&quot;:true},{\&quot;id\&quot;:\&quot;2\&quot;,\&quot;description\&quot;:\&quot;Dubai\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;3\&quot;,\&quot;description\&quot;:\&quot;India\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;4\&quot;,\&quot;description\&quot;:\&quot;hub by Premier Inn\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;5\&quot;,\&quot;description\&quot;:\&quot;Germany\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;6\&quot;,\&quot;description\&quot;:\&quot;German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;7\&quot;,\&quot;description\&quot;:\&quot;Non German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:true}],\&quot;receiveRestaurantInfo\&quot;:false},\&quot;isBusinessTrip\&quot;:false,\&quot;electronicInvoiceRequired\&quot;:true,\&quot;smsConfirmation\&quot;:false,\&quot;showBookingForSomeoneElse\&quot;:true,\&quot;savedGuestsDetails\&quot;:{},\&quot;reserveTableData\&quot;:{},\&quot;registerStatus\&quot;:false,\&quot;booker.mobileNumber\&quot;:\&quot;${PF_MobileNumber}\&quot;}}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${piUpsellsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;wifi&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[[]]}&quot;,&#xd;
	&quot;hasRenderedPreferedFoodOption&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;food&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[{\&quot;adultList\&quot;:[{\&quot;breakfastCode\&quot;:0}],\&quot;childList\&quot;:[]}]}&quot;,&#xd;
	&quot;foodDisplayed&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;},&#xd;
	&quot;yourDetails&quot;:&quot;{\&quot;timestamp\&quot;:${yourDetails2TimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:900000,\&quot;data\&quot;:{\&quot;booker\&quot;:{\&quot;address\&quot;:{\&quot;dialingCode\&quot;:\&quot;+91\&quot;,\&quot;dialingCountryCode\&quot;:\&quot;IND\&quot;,\&quot;countryCode\&quot;:\&quot;IND\&quot;,\&quot;countryCodeISO\&quot;:\&quot;IN\&quot;,\&quot;type\&quot;:\&quot;HOME\&quot;,\&quot;line1\&quot;:\&quot;${PF_line1}\&quot;,\&quot;postcode\&quot;:\&quot;${PF_postcode}\&quot;},\&quot;title\&quot;:\&quot;Mr\&quot;,\&quot;firstName\&quot;:\&quot;${PF_firstName}\&quot;,\&quot;lastName\&quot;:\&quot;${PF_lastName}\&quot;,\&quot;emailAddress\&quot;:\&quot;${PF_lastName}${PF_firstName}783@gmail.com\&quot;,\&quot;mobileNumber\&quot;:\&quot;${PF_MobileNumber}\&quot;},\&quot;guests\&quot;:[{\&quot;roomNumber\&quot;:\&quot;1\&quot;,\&quot;roomType\&quot;:\&quot;Double\&quot;,\&quot;adults\&quot;:1,\&quot;children\&quot;:0,\&quot;cotRequired\&quot;:false,\&quot;title\&quot;:\&quot;\&quot;,\&quot;firstName\&quot;:\&quot;\&quot;,\&quot;lastName\&quot;:\&quot;\&quot;,\&quot;manualGuestEntry\&quot;:false,\&quot;selected\&quot;:true}],\&quot;newsletter\&quot;:{\&quot;regions\&quot;:[{\&quot;id\&quot;:\&quot;1\&quot;,\&quot;description\&quot;:\&quot;UK &amp; Ireland\&quot;,\&quot;active\&quot;:true,\&quot;subscribed\&quot;:true},{\&quot;id\&quot;:\&quot;2\&quot;,\&quot;description\&quot;:\&quot;Dubai\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;3\&quot;,\&quot;description\&quot;:\&quot;India\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;4\&quot;,\&quot;description\&quot;:\&quot;hub by Premier Inn\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;5\&quot;,\&quot;description\&quot;:\&quot;Germany\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;6\&quot;,\&quot;description\&quot;:\&quot;German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;7\&quot;,\&quot;description\&quot;:\&quot;Non German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:true}],\&quot;receiveRestaurantInfo\&quot;:false},\&quot;isBusinessTrip\&quot;:false,\&quot;electronicInvoiceRequired\&quot;:true,\&quot;smsConfirmation\&quot;:false,\&quot;showBookingForSomeoneElse\&quot;:true,\&quot;savedGuestsDetails\&quot;:{},\&quot;reserveTableData\&quot;:{},\&quot;registerStatus\&quot;:false,\&quot;booker.mobileNumber\&quot;:\&quot;${PF_MobileNumber}\&quot;}}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${piUpsellsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;wifi&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[[]]}&quot;,&#xd;
	&quot;hasRenderedPreferedFoodOption&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;food&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[{\&quot;adultList\&quot;:[{\&quot;breakfastCode\&quot;:0}],\&quot;childList\&quot;:[]}]}&quot;,&#xd;
	&quot;foodDisplayed&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;},&#xd;
	&quot;yourDetails&quot;:&quot;{\&quot;timestamp\&quot;:${yourDetails2TimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:900000,\&quot;data\&quot;:{\&quot;booker\&quot;:{\&quot;address\&quot;:{\&quot;dialingCode\&quot;:\&quot;+91\&quot;,\&quot;dialingCountryCode\&quot;:\&quot;IND\&quot;,\&quot;countryCode\&quot;:\&quot;IND\&quot;,\&quot;countryCodeISO\&quot;:\&quot;IN\&quot;,\&quot;type\&quot;:\&quot;HOME\&quot;,\&quot;line1\&quot;:\&quot;${PF_line1}\&quot;,\&quot;postcode\&quot;:\&quot;${PF_postcode}\&quot;},\&quot;title\&quot;:\&quot;Mr\&quot;,\&quot;firstName\&quot;:\&quot;${PF_firstName}\&quot;,\&quot;lastName\&quot;:\&quot;${PF_lastName}\&quot;,\&quot;emailAddress\&quot;:\&quot;${PF_lastName}${PF_firstName}783@gmail.com\&quot;,\&quot;mobileNumber\&quot;:\&quot;${PF_MobileNumber}\&quot;},\&quot;guests\&quot;:[{\&quot;roomNumber\&quot;:\&quot;1\&quot;,\&quot;roomType\&quot;:\&quot;Double\&quot;,\&quot;adults\&quot;:1,\&quot;children\&quot;:0,\&quot;cotRequired\&quot;:false,\&quot;title\&quot;:\&quot;\&quot;,\&quot;firstName\&quot;:\&quot;\&quot;,\&quot;lastName\&quot;:\&quot;\&quot;,\&quot;manualGuestEntry\&quot;:false,\&quot;selected\&quot;:true}],\&quot;newsletter\&quot;:{\&quot;regions\&quot;:[{\&quot;id\&quot;:\&quot;1\&quot;,\&quot;description\&quot;:\&quot;UK &amp; Ireland\&quot;,\&quot;active\&quot;:true,\&quot;subscribed\&quot;:true},{\&quot;id\&quot;:\&quot;2\&quot;,\&quot;description\&quot;:\&quot;Dubai\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;3\&quot;,\&quot;description\&quot;:\&quot;India\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;4\&quot;,\&quot;description\&quot;:\&quot;hub by Premier Inn\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;5\&quot;,\&quot;description\&quot;:\&quot;Germany\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;6\&quot;,\&quot;description\&quot;:\&quot;German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;7\&quot;,\&quot;description\&quot;:\&quot;Non German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:true}],\&quot;receiveRestaurantInfo\&quot;:false},\&quot;isBusinessTrip\&quot;:false,\&quot;electronicInvoiceRequired\&quot;:true,\&quot;smsConfirmation\&quot;:false,\&quot;showBookingForSomeoneElse\&quot;:true,\&quot;savedGuestsDetails\&quot;:{},\&quot;reserveTableData\&quot;:{},\&quot;registerStatus\&quot;:false,\&quot;booker.mobileNumber\&quot;:\&quot;${PF_MobileNumber}\&quot;}}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${piUpsellsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;wifi&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[[]]}&quot;,&#xd;
	&quot;hasRenderedPreferedFoodOption&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;food&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[{\&quot;adultList\&quot;:[{\&quot;breakfastCode\&quot;:0}],\&quot;childList\&quot;:[]}]}&quot;,&#xd;
	&quot;foodDisplayed&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;},&#xd;
	&quot;yourDetails&quot;:&quot;{\&quot;timestamp\&quot;:${yourDetails2TimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:900000,\&quot;data\&quot;:{\&quot;booker\&quot;:{\&quot;address\&quot;:{\&quot;dialingCode\&quot;:\&quot;+91\&quot;,\&quot;dialingCountryCode\&quot;:\&quot;IND\&quot;,\&quot;countryCode\&quot;:\&quot;IND\&quot;,\&quot;countryCodeISO\&quot;:\&quot;IN\&quot;,\&quot;type\&quot;:\&quot;HOME\&quot;,\&quot;line1\&quot;:\&quot;${PF_line1}\&quot;,\&quot;postcode\&quot;:\&quot;${PF_postcode}\&quot;},\&quot;title\&quot;:\&quot;Mr\&quot;,\&quot;firstName\&quot;:\&quot;${PF_firstName}\&quot;,\&quot;lastName\&quot;:\&quot;${PF_lastName}\&quot;,\&quot;emailAddress\&quot;:\&quot;${PF_lastName}${PF_firstName}783@gmail.com\&quot;,\&quot;mobileNumber\&quot;:\&quot;${PF_MobileNumber}\&quot;},\&quot;guests\&quot;:[{\&quot;roomNumber\&quot;:\&quot;1\&quot;,\&quot;roomType\&quot;:\&quot;Double\&quot;,\&quot;adults\&quot;:1,\&quot;children\&quot;:0,\&quot;cotRequired\&quot;:false,\&quot;title\&quot;:\&quot;\&quot;,\&quot;firstName\&quot;:\&quot;\&quot;,\&quot;lastName\&quot;:\&quot;\&quot;,\&quot;manualGuestEntry\&quot;:false,\&quot;selected\&quot;:true}],\&quot;newsletter\&quot;:{\&quot;regions\&quot;:[{\&quot;id\&quot;:\&quot;1\&quot;,\&quot;description\&quot;:\&quot;UK &amp; Ireland\&quot;,\&quot;active\&quot;:true,\&quot;subscribed\&quot;:true},{\&quot;id\&quot;:\&quot;2\&quot;,\&quot;description\&quot;:\&quot;Dubai\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;3\&quot;,\&quot;description\&quot;:\&quot;India\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;4\&quot;,\&quot;description\&quot;:\&quot;hub by Premier Inn\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;5\&quot;,\&quot;description\&quot;:\&quot;Germany\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;6\&quot;,\&quot;description\&quot;:\&quot;German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;7\&quot;,\&quot;description\&quot;:\&quot;Non German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:true}],\&quot;receiveRestaurantInfo\&quot;:false},\&quot;isBusinessTrip\&quot;:false,\&quot;electronicInvoiceRequired\&quot;:true,\&quot;smsConfirmation\&quot;:false,\&quot;showBookingForSomeoneElse\&quot;:true,\&quot;savedGuestsDetails\&quot;:{},\&quot;reserveTableData\&quot;:{},\&quot;registerStatus\&quot;:false,\&quot;booker.mobileNumber\&quot;:\&quot;${PF_MobileNumber}\&quot;}}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;availability&quot;: {&#xd;
    &quot;arrival&quot;: &quot;${PP_arrivalDate}&quot;,&#xd;
    &quot;departure&quot;: &quot;${PP_departureDate}&quot;,&#xd;
    &quot;hotelBrand&quot;: &quot;PI&quot;,&#xd;
    &quot;notes&quot;: ${PP_hotelNotes},&#xd;
    &quot;ratePlan&quot;: ${PP_flexDetails},&#xd;
      &quot;hide&quot;: false,&#xd;
      &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
      &quot;itemText&quot;: ${PP_flexText},&#xd;
      &quot;itemNote&quot;: ${PP_flexText},&#xd;
      &quot;breakfastIncluded&quot;: false,&#xd;
      &quot;mealIncluded&quot;: false,&#xd;
      &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
      &quot;isCellCodeVisible&quot;: false,&#xd;
      &quot;longDescription&quot;: &quot;&quot;,&#xd;
      &quot;id&quot;: &quot;${PP_flexRoomCode}-0&quot;&#xd;
    },&#xd;
    &quot;ratePlans&quot;: [&#xd;
		${PP_flexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_flexText},&#xd;
        &quot;itemNote&quot;: ${PP_flexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_semiFlexDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Semi-Flex&quot;,&#xd;
        &quot;itemText&quot;: ${PP_semiflexText},&#xd;
        &quot;itemNote&quot;: ${PP_semiflexText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      },&#xd;
		${PP_standardDetails},&#xd;
        &quot;originalRatePrice&quot;: null,&#xd;
        &quot;hide&quot;: false,&#xd;
        &quot;itemLabel&quot;: &quot;Standard&quot;,&#xd;
        &quot;itemText&quot;: ${PP_standardText},&#xd;
        &quot;itemNote&quot;: ${PP_standardText},&#xd;
        &quot;breakfastIncluded&quot;: false,&#xd;
        &quot;mealIncluded&quot;: false,&#xd;
        &quot;sleepParkFlyDays&quot;: &quot;&quot;,&#xd;
        &quot;isCellCodeVisible&quot;: false,&#xd;
        &quot;longDescription&quot;: &quot;&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;sessionId&quot;: &quot;${PP_sessionId}&quot;,&#xd;
    &quot;arrivalDateToday&quot;: ${PP_arrivalDateToday},&#xd;
    &quot;hotelCode&quot;: &quot;${PP_hotelCode}&quot;,&#xd;
    &quot;limitedAvailability&quot;: &quot;${PP_limitedAvailability}&quot;,&#xd;
    &quot;prepaymentAllowed&quot;: ${PP_prepaymentAllowed},&#xd;
    &quot;totalNights&quot;: ${PP_totalNights},&#xd;
    &quot;totalGuests&quot;: ${PP_totalGuests},&#xd;
    &quot;originalRooms&quot;: [&#xd;
      {&#xd;
        &quot;adults&quot;: 1,&#xd;
        &quot;children&quot;: 0,&#xd;
        &quot;cot&quot;: false,&#xd;
        &quot;number&quot;: 1,&#xd;
        &quot;type&quot;: {&#xd;
          &quot;code&quot;: &quot;DB&quot;,&#xd;
          &quot;name&quot;: &quot;Double&quot;&#xd;
        }&#xd;
      }&#xd;
    ],&#xd;
    &quot;referrerUrl&quot;: &quot;https://${BASE_URL_1}/gb/en/hotels${PP_hotelLink}.html?ROOMS=1&amp;ADULT1=1&amp;COT1=0&amp;CHILD1=0&amp;ARRdd=${PP_arrivalDay}&amp;ARRmm=${PP_arrivalMonth}&amp;${PP_nights}&amp;INTTYP1=DB&amp;ARRyyyy=${PP_arrivalYear}&amp;BRAND=PI&quot;,&#xd;
    &quot;cityTaxForLeisure&quot;: ${PP_cityTaxForLeisure},&#xd;
    &quot;cityTaxForBusiness&quot;: ${PP_cityTaxForBusiness},&#xd;
    &quot;paymentProvider&quot;: &quot;${PP_paymentProvider}&quot;,&#xd;
    &quot;cnpAuthorisation&quot;: ${PP_cnpAuthorisation}&#xd;
	},&#xd;
	&quot;hotelDetails&quot;: &quot;{\&quot;timestamp\&quot;:${hotelDetailstime},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelWebData}}&quot;,&#xd;
	&quot;regions&quot;: &quot;{\&quot;timestamp\&quot;:${regionsTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_hotelRegions}}&quot;,&#xd;
	&quot;countries&quot;: &quot;{\&quot;timestamp\&quot;:${countriesTimeStamp},\&quot;sessionId\&quot;:false,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:${PP_countries}}&quot;,&#xd;
	&quot;piUpsells&quot;:&quot;{\&quot;timestamp\&quot;:${piUpsellsTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;wifi&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[[]]}&quot;,&#xd;
	&quot;hasRenderedPreferedFoodOption&quot;:&quot;{\&quot;timestamp\&quot;:${wifiTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;,	&#xd;
	&quot;food&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:[{\&quot;adultList\&quot;:[{\&quot;breakfastCode\&quot;:0}],\&quot;childList\&quot;:[]}]}&quot;,&#xd;
	&quot;foodDisplayed&quot;:&quot;{\&quot;timestamp\&quot;:${foodTimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:1209600000,\&quot;data\&quot;:true}&quot;},&#xd;
	&quot;yourDetails&quot;:&quot;{\&quot;timestamp\&quot;:${yourDetails2TimeStamp},\&quot;sessionId\&quot;:\&quot;${PP_sessionId}\&quot;,\&quot;lifetime\&quot;:900000,\&quot;data\&quot;:{\&quot;booker\&quot;:{\&quot;address\&quot;:{\&quot;dialingCode\&quot;:\&quot;+91\&quot;,\&quot;dialingCountryCode\&quot;:\&quot;IND\&quot;,\&quot;countryCode\&quot;:\&quot;IND\&quot;,\&quot;countryCodeISO\&quot;:\&quot;IN\&quot;,\&quot;type\&quot;:\&quot;HOME\&quot;,\&quot;line1\&quot;:\&quot;${PF_line1}\&quot;,\&quot;postcode\&quot;:\&quot;${PF_postcode}\&quot;},\&quot;title\&quot;:\&quot;Mr\&quot;,\&quot;firstName\&quot;:\&quot;${PF_firstName}\&quot;,\&quot;lastName\&quot;:\&quot;${PF_lastName}\&quot;,\&quot;emailAddress\&quot;:\&quot;${PF_lastName}${PF_firstName}783@gmail.com\&quot;,\&quot;mobileNumber\&quot;:\&quot;${PF_MobileNumber}\&quot;},\&quot;guests\&quot;:[{\&quot;roomNumber\&quot;:\&quot;1\&quot;,\&quot;roomType\&quot;:\&quot;Double\&quot;,\&quot;adults\&quot;:1,\&quot;children\&quot;:0,\&quot;cotRequired\&quot;:false,\&quot;title\&quot;:\&quot;\&quot;,\&quot;firstName\&quot;:\&quot;\&quot;,\&quot;lastName\&quot;:\&quot;\&quot;,\&quot;manualGuestEntry\&quot;:false,\&quot;selected\&quot;:true}],\&quot;newsletter\&quot;:{\&quot;regions\&quot;:[{\&quot;id\&quot;:\&quot;1\&quot;,\&quot;description\&quot;:\&quot;UK &amp; Ireland\&quot;,\&quot;active\&quot;:true,\&quot;subscribed\&quot;:true},{\&quot;id\&quot;:\&quot;2\&quot;,\&quot;description\&quot;:\&quot;Dubai\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;3\&quot;,\&quot;description\&quot;:\&quot;India\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;4\&quot;,\&quot;description\&quot;:\&quot;hub by Premier Inn\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;5\&quot;,\&quot;description\&quot;:\&quot;Germany\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;6\&quot;,\&quot;description\&quot;:\&quot;German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:false},{\&quot;id\&quot;:\&quot;7\&quot;,\&quot;description\&quot;:\&quot;Non German Residence Opt in\&quot;,\&quot;active\&quot;:false,\&quot;subscribed\&quot;:true}],\&quot;receiveRestaurantInfo\&quot;:false},\&quot;isBusinessTrip\&quot;:false,\&quot;electronicInvoiceRequired\&quot;:true,\&quot;smsConfirmation\&quot;:false,\&quot;showBookingForSomeoneElse\&quot;:true,\&quot;savedGuestsDetails\&quot;:{},\&quot;reserveTableData\&quot;:{},\&quot;registerStatus\&quot;:false,\&quot;booker.mobileNumber\&quot;:\&quot;${PF_MobileNumber}\&quot;}}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_6}/gb/en/booking-a1/payment.tpl.html" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/booking-a1/payment.tpl.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_bookinf_JS" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">C_bookinf_JS</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;script src=&quot;/etc/clientlibs/booking.(.*?)&quot;&gt;&lt;/script&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_3}/rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;requestId&quot;:&quot;${CF_requestID6}&quot;,&quot;context&quot;:{&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;,&quot;timeOffsetInMinutes&quot;:330,&quot;channel&quot;:&quot;web&quot;,&quot;screen&quot;:{&quot;width&quot;:1536,&quot;height&quot;:864,&quot;orientation&quot;:&quot;landscape&quot;,&quot;colorDepth&quot;:24,&quot;pixelRatio&quot;:1.25},&quot;window&quot;:{&quot;width&quot;:1519,&quot;height&quot;:746},&quot;browser&quot;:{&quot;host&quot;:&quot;secure2.premierinn.com&quot;,&quot;webGLRenderer&quot;:&quot;ANGLE (Intel, Intel(R) Iris(R) Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11)&quot;},&quot;address&quot;:{&quot;url&quot;:&quot;https://${BASE_URL_6}/gb/en/booking-a1/payment.html&quot;,&quot;referringUrl&quot;:&quot;https://${BASE_URL_1}/&quot;}},&quot;id&quot;:{&quot;tntId&quot;:&quot;${CF_sessionID}.31_0&quot;,&quot;marketingCloudVisitorId&quot;:&quot;25764356207244138064059662056462270276&quot;},&quot;experienceCloud&quot;:{&quot;audienceManager&quot;:{&quot;locationHint&quot;:12,&quot;blob&quot;:&quot;6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y&quot;},&quot;analytics&quot;:{&quot;logging&quot;:&quot;server_side&quot;,&quot;supplementalDataId&quot;:&quot;531447FAEC188876-3DB99FECD1C5CE3F&quot;}},&quot;execute&quot;:{&quot;mboxes&quot;:[{&quot;index&quot;:0,&quot;name&quot;:&quot;Header-Config&quot;}]},&quot;telemetry&quot;:{&quot;entries&quot;:[{&quot;requestId&quot;:3198432,&quot;timestamp&quot;:${__time(,)},&quot;execution&quot;:16},{&quot;execution&quot;:1399.2,&quot;parsing&quot;:0,&quot;request&quot;:{&quot;timeToFirstByte&quot;:1392.1,&quot;download&quot;:1,&quot;responseSize&quot;:317},&quot;telemetryServerToken&quot;:&quot;6TAR7trXEfvIpU3pjYt+RW+DZ01uBGk+S/iOWVzz8uw=&quot;,&quot;mode&quot;:&quot;edge&quot;,&quot;features&quot;:{&quot;executeMboxCount&quot;:1,&quot;decisioningMethod&quot;:&quot;server-side&quot;},&quot;requestId&quot;:&quot;${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,)}&quot;,&quot;timestamp&quot;:${__time(,)}}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_6}/public/${C_publicJS}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">public/${C_publicJS}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_6}/etc/clientlibs/booking.${C_bookinf_JS}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">etc/clientlibs/booking.${C_bookinf_JS}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_6}/gb/en/booking-a1/payment.componentlist.bookingflowdata" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gb/en/booking-a1/payment.componentlist.bookingflowdata</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="ADRUM" elementType="Header">
                  <stringProp name="Header.name">ADRUM</stringProp>
                  <stringProp name="Header.value">isAjax:true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_2}//storage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="id" elementType="Header">
                  <stringProp name="Header.name">id</stringProp>
                  <stringProp name="Header.value">${C_BookID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_3}/rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;requestId&quot;:&quot;${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,)}&quot;,&quot;context&quot;:{&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;,&quot;timeOffsetInMinutes&quot;:330,&quot;channel&quot;:&quot;web&quot;,&quot;screen&quot;:{&quot;width&quot;:1536,&quot;height&quot;:864,&quot;orientation&quot;:&quot;landscape&quot;,&quot;colorDepth&quot;:24,&quot;pixelRatio&quot;:1.25},&quot;window&quot;:{&quot;width&quot;:1519,&quot;height&quot;:746},&quot;browser&quot;:{&quot;host&quot;:&quot;secure2.premierinn.com&quot;,&quot;webGLRenderer&quot;:&quot;ANGLE (Intel, Intel(R) Iris(R) Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11)&quot;},&quot;address&quot;:{&quot;url&quot;:&quot;https://${BASE_URL_6}/gb/en/booking-a1/payment.html&quot;,&quot;referringUrl&quot;:&quot;https://${BASE_URL_1}/&quot;}},&quot;id&quot;:{&quot;tntId&quot;:&quot;${CF_sessionID}.31_0&quot;,&quot;marketingCloudVisitorId&quot;:&quot;25764356207244138064059662056462270276&quot;},&quot;experienceCloud&quot;:{&quot;audienceManager&quot;:{&quot;locationHint&quot;:12,&quot;blob&quot;:&quot;6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y&quot;},&quot;analytics&quot;:{&quot;logging&quot;:&quot;server_side&quot;,&quot;supplementalDataId&quot;:&quot;531447FAEC188876-3DB99FECD1C5CE3F&quot;}},&quot;execute&quot;:{&quot;mboxes&quot;:[{&quot;index&quot;:0,&quot;name&quot;:&quot;booking-flow-test&quot;}]},&quot;telemetry&quot;:{&quot;entries&quot;:[{&quot;execution&quot;:98.3,&quot;parsing&quot;:0.1,&quot;request&quot;:{&quot;dns&quot;:7.7,&quot;tls&quot;:35.8,&quot;timeToFirstByte&quot;:26.3,&quot;download&quot;:1,&quot;responseSize&quot;:318},&quot;telemetryServerToken&quot;:&quot;cJWuCgDiaU1IgPqDGhBbFED2EX07VODPHUW1TU+2Foc=&quot;,&quot;mode&quot;:&quot;edge&quot;,&quot;features&quot;:{&quot;executeMboxCount&quot;:1,&quot;decisioningMethod&quot;:&quot;server-side&quot;},&quot;requestId&quot;:&quot;${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,)}&quot;,&quot;timestamp&quot;:${__time(,)}}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">rest/v1/delivery?client=whitbreadgroup&amp;sessionId=${CF_sessionID}&amp;version=2.8.2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${BASE_URL_5}/b/ss/whitpreminnprod/10/JS-2.22.4-LCUM/s36108702117637" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="c31" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c31</stringProp>
                  <stringProp name="Argument.value">New</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c32" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c32</stringProp>
                  <stringProp name="Argument.value">First Visit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cm." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cm.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ssf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ssf</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c38" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c38</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v90" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v90</stringProp>
                  <stringProp name="Argument.value">/gb/en/booking-a1/payment.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aamlh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aamlh</stringProp>
                  <stringProp name="Argument.value">12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v91" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v91</stringProp>
                  <stringProp name="Argument.value">Step: 3: carddetails,donation,submitbooking,payment,previousstep,bookingflowmessages</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AQB" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AQB</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fpCookieDomainPeriods" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fpCookieDomainPeriods</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="apc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">apc</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AQE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AQE</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=".cm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.cm</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sdid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sdid</stringProp>
                  <stringProp name="Argument.value">531447FAEC188876-3DB99FECD1C5CE3F</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v15" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v15</stringProp>
                  <stringProp name="Argument.value">aem 5.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="events" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">events</stringProp>
                  <stringProp name="Argument.value">event23,scCheckout,event174,,event120,event284,event285,event286</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c45" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c45</stringProp>
                  <stringProp name="Argument.value">D=s.version</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c48" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c48</stringProp>
                  <stringProp name="Argument.value">yourdetails</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c47" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c47</stringProp>
                  <stringProp name="Argument.value">extra large | aem 5.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="dns" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">dns</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cdp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cdp</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pfi" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pfi</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v27" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v27</stringProp>
                  <stringProp name="Argument.value">New</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="server" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">server</stringProp>
                  <stringProp name="Argument.value">castor</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="c55" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c55</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bh</stringProp>
                  <stringProp name="Argument.value">746</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">25764356207244138064059662056462270276</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="d." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">d.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rsp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rsp</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="products" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">products</stringProp>
                  <stringProp name="Argument.value">;${PP_hotelCode};;;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bw</stringProp>
                  <stringProp name="Argument.value">1536</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v34" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v34</stringProp>
                  <stringProp name="Argument.value">not logged-in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tot" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tot</stringProp>
                  <stringProp name="Argument.value">1.90</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v36" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v36</stringProp>
                  <stringProp name="Argument.value">+1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v35" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v35</stringProp>
                  <stringProp name="Argument.value">0fb7a926-0302-49b6-922b-5c125fd0ed64:0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v38" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v38</stringProp>
                  <stringProp name="Argument.value">100|100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v37" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v37</stringProp>
                  <stringProp name="Argument.value">https://secure2.premierinn.com/gb/en/booking-a1/yourdetails.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c60" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c60</stringProp>
                  <stringProp name="Argument.value">22:23:27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c61" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c61</stringProp>
                  <stringProp name="Argument.value">${PP_sessionId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cc</stringProp>
                  <stringProp name="Argument.value">GBP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="mcorgid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mcorgid</stringProp>
                  <stringProp name="Argument.value">178D467352784DDC0A490D45@AdobeOrg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ce</stringProp>
                  <stringProp name="Argument.value">UTF-8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c</stringProp>
                  <stringProp name="Argument.value">24</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ch</stringProp>
                  <stringProp name="Argument.value">booking flow</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="g" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">g</stringProp>
                  <stringProp name="Argument.value">https://secure2.premierinn.com/gb/en/booking-a1/payment.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="j" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j</stringProp>
                  <stringProp name="Argument.value">1.6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="k" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">k</stringProp>
                  <stringProp name="Argument.value">Y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="onl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">onl</stringProp>
                  <stringProp name="Argument.value">0.01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v41" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v41</stringProp>
                  <stringProp name="Argument.value">RT-DBS-61.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ndh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ndh</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="s" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">s</stringProp>
                  <stringProp name="Argument.value">1536x864</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value">28/6/2022 22:23:28 4 -330</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">N</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v44" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v44</stringProp>
                  <stringProp name="Argument.value">D=s.version</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v47" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v47</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v49" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v49</stringProp>
                  <stringProp name="Argument.value">First Visit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pidt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pidt</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c75" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c75</stringProp>
                  <stringProp name="Argument.value">D=v91</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rdr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rdr</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c74" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c74</stringProp>
                  <stringProp name="Argument.value">asia/kolkata</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="jsonv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">jsonv</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pid</stringProp>
                  <stringProp name="Argument.value">en: booking yourdetails</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageName</stringProp>
                  <stringProp name="Argument.value">en: booking payment</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="nsid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">nsid</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="aamb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aamb</stringProp>
                  <stringProp name="Argument.value">6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v58" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v58</stringProp>
                  <stringProp name="Argument.value">https://secure2.premierinn.com/gb/en/booking-a1/payment.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v57" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v57</stringProp>
                  <stringProp name="Argument.value">D=pageName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="req" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">req</stringProp>
                  <stringProp name="Argument.value">0.34</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="prc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">prc</stringProp>
                  <stringProp name="Argument.value">1.49</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pt." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pt.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="et" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">et</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lrt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lrt</stringProp>
                  <stringProp name="Argument.value">48</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name=".pt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.pt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageIDType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageIDType</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">en: booking yourdetails</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="region" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">region</stringProp>
                  <stringProp name="Argument.value">booking-flow-form</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name=".activitymap" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.activitymap</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="activitymap." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activitymap.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="link" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">link</stringProp>
                  <stringProp name="Argument.value">Continue</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c18" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c18</stringProp>
                  <stringProp name="Argument.value">D=v15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="oid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">oid</stringProp>
                  <stringProp name="Argument.value">Continue</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v122" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v122</stringProp>
                  <stringProp name="Argument.value">OEQQxzuoY8ZkqT84</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v74" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v74</stringProp>
                  <stringProp name="Argument.value">asia/kolkata</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v75" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v75</stringProp>
                  <stringProp name="Argument.value">https://secure2.premierinn.com/gb/en/booking-a1/payment.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v78" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v78</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v77" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v77</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="oidt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">oidt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tcp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tcp</stringProp>
                  <stringProp name="Argument.value">0.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c20" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c20</stringProp>
                  <stringProp name="Argument.value">https://secure2.premierinn.com/gb/en/booking-a1/yourdetails.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c21" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c21</stringProp>
                  <stringProp name="Argument.value">100|100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c24" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c24</stringProp>
                  <stringProp name="Argument.value">not logged-in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c23" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c23</stringProp>
                  <stringProp name="Argument.value">not logged-in: yourdetails</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ot" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ot</stringProp>
                  <stringProp name="Argument.value">SUBMIT</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="c27" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">c27</stringProp>
                  <stringProp name="Argument.value">https://secure2.premierinn.com/gb/en/booking-a1/payment.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="a." elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">a.</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name=".a" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.a</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name=".c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.c</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pf</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name=".d" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">.d</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">b/ss/whitpreminnprod/10/JS-2.22.4-LCUM/s36108702117637</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">Premier_Inn_LoadTest_errors.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">Premier_Inn_LoadTest_Results.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
